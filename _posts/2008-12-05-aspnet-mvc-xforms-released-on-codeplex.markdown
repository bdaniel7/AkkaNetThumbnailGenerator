---
layout: post
title: "ASP.NET MVC XForms released on CodePlex"
date: 2008-12-05 12:14:00 +0100
comments: true
published: true
categories: ["post"]
tags: ["ASP.NET", "CSharp", "General", "jQuery", "MVC", "Software"]
alias: ["/post/2008/12/05/ASPNET-MVC-XForms-released-on-CodePlex.aspx", "/post/2008/12/05/aspnet-mvc-xforms-released-on-codeplex.aspx"]
author: Maarten Balliauw
redirect_from:
 - /post/2008/12/05/ASPNET-MVC-XForms-released-on-CodePlex.aspx.html
 - /post/2008/12/05/aspnet-mvc-xforms-released-on-codeplex.aspx.html
---
<p>
Just <a href="http://www.joncurtis.co.uk/post/MVC-XForms-Release-1-on-codeplex.aspx" target="_blank">noticed</a> there&#39;s a new project on CodePlex related to the ASP.NET MVC framework: <a href="http://www.codeplex.com/mvcxforms" target="_blank">MVC XForms</a>. MVC XForms is a simple UI framework for ASP.NET MVC based on the <a href="http://www.w3.org/TR/xforms/" target="_blank">W3C XForms specification</a>. It provides a set of form controls that allow updating of complex model objects. 
</p>
<p>
Picked these project goals from Jon Curtis&#39; blog: 
</p>
<ul>
	<li>To allow automatic form population, deserialization and validation based on the (arbitrarily complex) model. </li>
	<li>To produce semantic HTML forms using the logic of XForms. </li>
	<li>To output clean, terse HTML. </li>
	<li>No javascript, unless necessary and always optional and unobtrusive. </li>
	<li>To enable clean, terse view code. </li>
	<li>To make the framework as extensible and customisable as possible without compromising simplicity or the above goals. </li>
	<li>Use convention over configuration and a fluent API.</li>
</ul>
<h2>Great story, but how does it work?</h2>
<p>
I haven&#39;t gone into any advanced scenario&#39;s, but have instead used a simple case to demonstrate some of the MVC XForms basics. First of all, I&#39;ve created a <em>Person</em> class with an Id (<em>int</em>), Name (<em>string</em>) and BirthDate (<em>DateTime</em>). This class is used by a specific view in my application, of which the view markup looks like this: 
</p>
<p>
&lt;% Html.XForm(ViewData.Model).Form(form =&gt; { %&gt;<br />
&nbsp; &lt;%=form.Input(p =&gt; p.Name).Label(&quot;Name&quot;) %&gt;<br />
&nbsp; &lt;%=form.Input(p =&gt; p.BirthDate).Label(&quot;Birth date&quot;) %&gt;<br />
&lt;% }); %&gt; 
</p>
<p>
This is all there is to creating an MVC XForm. Note that I&#39;m creating a <em>XForm</em> based on my model, and that I want an input field for the Name and BirthDate properties, each with a label supplied. 
</p>
<p>
On to rendering: the HTML generated by MVC XForm looks like the following: 
</p>
<p>
&lt;form action=&quot;&quot; method=&quot;post&quot; class=&quot;xf xform&quot;&gt;<br />
&nbsp; &lt;div class=&quot;xf input text&quot;&gt;<br />
&nbsp;&nbsp;&nbsp; &lt;label for=&quot;Name&quot;&gt;Name&lt;/label&gt;<br />
&nbsp;&nbsp;&nbsp; &lt;input id=&quot;Name&quot; type=&quot;text&quot; name=&quot;Name&quot; value=&quot;Maarten Balliauw&quot;/&gt;<br />
&nbsp; &lt;/div&gt;<br />
&nbsp; &lt;div class=&quot;xf input date&quot;&gt;<br />
&nbsp;&nbsp;&nbsp; &lt;label for=&quot;BirthDate&quot;&gt;Birth date&lt;/label&gt;<br />
&nbsp;&nbsp;&nbsp; &lt;input id=&quot;BirthDate&quot; type=&quot;text&quot; name=&quot;BirthDate&quot; value=&quot;21-12-1983&quot;/&gt;<br />
&nbsp; &lt;/div&gt;<br />
&lt;/form&gt;<br />
&lt;script type=&quot;text/javascript&quot;&gt;<br />
&nbsp; $(document).ready(function(){mvc.xforms.init({&quot;id&quot;:&quot;&quot;,&quot;cons&quot;:[]})});<br />
&lt;/script&gt; 
</p>
<p>
That&#39;s actually nice, clean HTML markup! Note the CSS classes that are applied on certain fields. For example, the div element for BirthDate has a CSS class &quot;date&quot;, which can be used by, for example, jQuery to enable a date picker on that field. 
</p>
<h2>More information</h2>
<p>
In the CodePlex download (<a href="http://www.codeplex.com/mvcxforms" title="http://www.codeplex.com/mvcxforms">http://www.codeplex.com/mvcxforms</a>), there is a sample project which makes use of all simple and advanced ideas in MVC XForms. You can also check out Jon Curtis&#39; <a href="http://www.joncurtis.co.uk/post/ASPNet-MVC-XForms.aspx" target="_blank">blog</a> <a href="http://www.joncurtis.co.uk/post/MVC-XForm-container-controls-XForm-Group-and-Repeat.aspx" target="_blank">posts</a> on MVC XForms to read some more samples. 
</p>
<p>
<a href="http://www.dotnetkicks.com/kick/?url=/post/2008/12/05/ASPNET-MVC-XForms-released-on-CodePlex.aspx&amp;title=ASP.NET MVC XForms released on CodePlex">
                    <img src="http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=/post/2008/12/05/ASPNET-MVC-XForms-released-on-CodePlex.aspx" border="0" alt="kick it on DotNetKicks.com" />
                  </a>
</p>

{% include imported_disclaimer.html %}
