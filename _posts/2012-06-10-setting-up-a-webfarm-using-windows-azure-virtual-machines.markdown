---
layout: post
title: "Setting up a webfarm using Windows Azure Virtual Machines"
date: 2012-06-10 14:27:36 +0000
comments: true
published: true
categories: ["post"]
tags: ["ASP.NET", "CSharp", "Azure", "General", "Webfarm", "Scalability", "MVC", "Hardware"]
alias: ["/post/2012/06/10/Setting-up-a-webfarm-using-Windows-Azure-Virtual-Machines.aspx", "/post/2012/06/10/setting-up-a-webfarm-using-windows-azure-virtual-machines.aspx"]
author: Maarten Balliauw
redirect_from:
 - /post/2012/06/10/Setting-up-a-webfarm-using-Windows-Azure-Virtual-Machines.aspx.html
 - /post/2012/06/10/setting-up-a-webfarm-using-windows-azure-virtual-machines.aspx.html
---
<p>With the release of Microsoft’s Windows Azure Virtual Machines, a bunch of new scenarios became available on their cloud platform. If you plan to host multiple web applications, you can either go with Windows Azure Web Sites or go with a webfarm you create using the new IaaS capabilities. The first is okay for any type of application, the latter may be suitable when running a large-scale web application that can not be deployed easily in the PaaS offering. In this blog post, I’ll show you how to build a webfarm with (free!) load balancing.</p>  <p><em>Note: I’ll be using the built-in Windows Azure load balancer. If required, you can also deploy your own load balancer VM or reverse proxy. But since the Windows Azure load balancer comes with no extra cost, I think it’s the better choice for a lot of scenarios.</em></p>  <h2>Creating a first virtual machine</h2>  <p>After logging in to the <a href="http://manage.windowsazure.com/">new Windows Azure management portal</a>, create a new virtual machine. You can choose to create a Linux or a Windows machine from a template or upload your own VM. I’ll go with a Windows machine but everything explained in this post is valid for a Linux webfarm, too.</p>  <p><a href="/images/image_194.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; margin: 5px auto; padding-left: 0px; padding-right: 0px; display: block; float: none; border-top: 0px; border-right: 0px; padding-top: 0px" title="Creating a Windows Azure Virtual Machine" border="0" alt="Creating a Windows Azure Virtual Machine" src="/images/image_thumb_159.png" width="484" height="338" /></a></p>  <p>Navigate through the wizard, selecting the VM size and administrator username of choice. In step 3 where you have to specify the DNS name and some other settings, be sure to choose an affinity group (giving better networking performance due to the fact that machines are on the same network in the Windows Azure datacenter). The DNS name can be anything you want to name your webfarm.</p>  <p><a href="/images/image_195.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; margin: 5px auto; padding-left: 0px; padding-right: 0px; display: block; float: none; border-top: 0px; border-right: 0px; padding-top: 0px" title="Windows Azure Virtual Machine Windows Linux" border="0" alt="Windows Azure Virtual Machine Windows Linux" src="/images/image_thumb_160.png" width="484" height="342" /></a></p>  <p>Before finishing the wizard, there is an important thing to do: in step 4, make sure to create an availability group in which all machines of the webfarm will reside. An availability group ensures that whenever maintenance occurs in the datacenter, this only occurs on one or some of your webfarm machines and not on all at once.</p>  <p><a href="/images/image_196.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; margin: 5px auto; padding-left: 0px; padding-right: 0px; display: block; float: none; border-top: 0px; border-right: 0px; padding-top: 0px" title="Windows Azure VM options" border="0" alt="Windows Azure VM options" src="/images/image_thumb_161.png" width="484" height="344" /></a></p>  <h2>Adding an HTTP endpoint to the first machine</h2>  <p>After the first virtual machine has been created, navigate to its configuration dashboard in the Windows Azure management portal. In order to have port 80 connected to this machine, a new endpoint should be added to the machine. Add the endpoints of choice, I chose to have port 80 open.</p>  <p><a href="/images/image_197.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; margin: 5px auto; padding-left: 0px; padding-right: 0px; display: block; float: none; border-top: 0px; border-right: 0px; padding-top: 0px" title="Windows Azure configure VM endpoints" border="0" alt="Windows Azure configure VM endpoints" src="/images/image_thumb_162.png" width="484" height="336" /></a></p>  <p>It is important to understand that the endpoints added here are only opened at the load balancer level. That’s right: even a single machine will be behind a load balancer. This is incredibly powerful, as you’ll see when we add a new machine to our IaaS webfarm. It also poses an extra configuration step for single machines though: you’ll have to open port 80 on the machine’s firewall, too. You can safely use remote desktop (Windows) or SSH (Linux) to do so:</p>  <p><a href="/images/image_198.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; margin: 5px auto; padding-left: 0px; padding-right: 0px; display: block; float: none; border-top: 0px; border-right: 0px; padding-top: 0px" title="Install IIS on WIndows Azure Virtual Machine" border="0" alt="Install IIS on WIndows Azure Virtual Machine" src="/images/image_thumb_163.png" width="484" height="344" /></a></p>  <h2>Cloning the first machine</h2>  <p>To make things easy, I’ve first configured IIS on the first machine. I simply enabled the webserver and made sure Windows Firewall allows connections to IIS. From this point on, I simply want to clone this machine and add it to my webfarm.</p>  <p>The first thing to do when cloning (or “capturing”) a VM is “sysprepping” it. On Linux, there’s a similar option in the <a href="https://www.windowsazure.com/en-us/manage/windows/how-to-guides/capture-an-image/">Windows Azure agent</a>. Sysprep ensures the machine can be cloned into a new machine, getting it’s own settings like a hostname and IP address. A non-sysprepped machine can thus never be cloned.</p>  <p><a href="/images/image_199.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; margin: 5px auto; padding-left: 0px; padding-right: 0px; display: block; float: none; border-top: 0px; border-right: 0px; padding-top: 0px" title="Windows azure virtual machine requires sysprep" border="0" alt="Windows azure virtual machine requires sysprep" src="/images/image_thumb_164.png" width="358" height="270" /></a></p>  <p>After sysprepping the machine, shut it down. If you’ve selected the option during sysprep, the machine will automatically shutdown. Otherwise you can do so through remote desktop or SSH, or simply through the Windows Azure portal.</p>  <p><a href="/images/image_200.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; margin: 5px auto; padding-left: 0px; padding-right: 0px; display: block; float: none; border-top: 0px; border-right: 0px; padding-top: 0px" title="Shutdown virtual machine on Windows Azure" border="0" alt="Shutdown virtual machine on Windows Azure" src="/images/image_thumb_165.png" width="484" height="54" /></a></p>  <p>Next, click the “Capture” button to create a disk image from this machine. Give it a name and&#160; check the “Yes, I’ve sysprepped the machine” checkbox in order to be able to continue.</p>  <p><a href="/images/image_201.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; margin: 5px auto; padding-left: 0px; padding-right: 0px; display: block; float: none; border-top: 0px; border-right: 0px; padding-top: 0px" title="Windows Azure Capture virtual machine" border="0" alt="Windows Azure Capture virtual machine" src="/images/image_thumb_166.png" width="484" height="368" /></a></p>  <p>After clicking the “ok” button, Windows Azure will create an image of our first webserver.</p>  <p>After the image has been created, you’ll notice that your first webserver has disappeared! This is normal: the machine has been disemboweled in order to create a template from it. You can now simply re-create this machine using the same settings as before, except you can now base it on this newly created VM image instead of basing it off a VM template Microsoft provides.</p>  <p>In the endpoints configuration, make sure to add the HTTP endpoint again listening on port 80.</p>  <h2>Creating a second virtual machine</h2>  <p>To create the second machine in your webfarm, create a fresh virtual machine. As the base disk, choose the image we’ve created earlier:</p>  <p><a href="/images/image_202.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; margin: 5px auto; padding-left: 0px; padding-right: 0px; display: block; float: none; border-top: 0px; border-right: 0px; padding-top: 0px" title="Windows Azure create your own virtual machine image" border="0" alt="Windows Azure create your own virtual machine image" src="/images/image_thumb_167.png" width="484" height="170" /></a></p>  <p>In step 3 of the machine creation, make sure to connect this machine to our existing web server. In step 4, locate the VM in the same availability set.</p>  <p><a href="/images/image_203.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; margin: 5px auto; padding-left: 0px; padding-right: 0px; display: block; float: none; border-top: 0px; border-right: 0px; padding-top: 0px" title="Connect to an existing virtual machine in Windows Azure" border="0" alt="Connect to an existing virtual machine in Windows Azure" src="/images/image_thumb_168.png" width="484" height="340" /></a></p>  <p>You now have two machines running, yet they aren’t load balanced at this moment. You’ll notice that both machines are already behind the same hostname (<a href="http://webfarm.cloudapp.net">http://webfarm.cloudapp.net</a>) and that they share the same public virtual IP address. This is due to the fact that we “linked” the machines earlier. If you don’t, you will never be able to use the out-of-the-box load balancer that comes with Windows Azure. This also means that the public remote desktop endpoint for both machines will be different: there’s only one IP address exposed to the outside world so you’ll have to think about endpoints.</p>  <p>Don’t add the HTTP endpoint to this machine just yet.</p>  <h2>Configuring the Windows Azure load balancer</h2>  <p>The last part of setting up our webfarm will be load balancing.&#160; This is in fact really, really easy. Simply go to second machine’s dashboard in the Windows Azure portal and navigate to the <em>Endpoints</em> tab. We’ve already added public HTTP endpoints on our first machine, which means for our second machine we can just subscribe to load balancing:</p>  <p><a href="/images/image_204.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; margin: 5px auto; padding-left: 0px; padding-right: 0px; display: block; float: none; border-top: 0px; border-right: 0px; padding-top: 0px" title="Windows Azure comes with free load balancing" border="0" alt="Windows Azure comes with free load balancing" src="/images/image_thumb_169.png" width="484" height="352" /></a></p>  <p>Easy, huh? You now have <u>free</u> round-robin <u>load balancing</u> with checks every few seconds to ensure that all machines are up and running. And since we linked these machines through an availability set, they are on different fault domains in the datacenter reducing the chance of errors due to malfunctioning hardware or maintenance. You can safely shut down a machine too. In short: anything you’d expect from a load balancer (except sticky sessions).</p>  <h2>Final words</h2>  <p>There is of course more to it. In ASP.NET, you’ll have to configure machine keys and such in the same way you would do it on-premise. But at the infrastructure level, we’re covered. Enjoy! And be sure to brag about this adventure to any IT pro you know :-)</p>
{% include imported_disclaimer.html %}
