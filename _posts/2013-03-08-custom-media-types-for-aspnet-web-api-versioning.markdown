---
layout: post
title: "Custom media types for ASP.NET Web API versioning"
date: 2013-03-08 12:25:00 +0100
comments: true
published: true
categories: ["post"]
tags: ["ASP.NET", "CSharp", "General", "WebAPI"]
alias: ["/post/2013/03/08/Custom-media-types-for-ASPNET-Web-API-versioning.aspx", "/post/2013/03/08/custom-media-types-for-aspnet-web-api-versioning.aspx"]
author: Maarten Balliauw
redirect_from:
 - /post/2013/03/08/Custom-media-types-for-ASPNET-Web-API-versioning.aspx.html
 - /post/2013/03/08/custom-media-types-for-aspnet-web-api-versioning.aspx.html
---
<p>There is a raging discussion on the interwebs on whether to version API&rsquo;s by using their URL or by using a custom media type. Some argue that doing it in the URL breaks REST (since a different URL is a different resource while versions don&rsquo;t necessarily mean a new resource is available). While I still feel good about both approaches, I guess it depends on the domain you are working with.</p>
<p>But that is not the topic of this talk. I recently found a <a href="http://aspnet.codeplex.com/SourceControl/changeset/view/0e68a22781fd#Samples/WebApi/NamespaceControllerSelector/ReadMe.txt">sample on CodePlex providing support for routing versioned URL&rsquo;s</a> to different namespaces. In short, it maps <em>/api/v1/values</em> to <em>MyApp.V1.Controllers</em> and /<em>api/v2/values</em> to <em>MyApp.V2.Controllers</em>. Great! But that only supports the URL-versioning side of the discussion. Let&rsquo;s implement this sample and build ASP.NET Web API support for versioning an API using custom media types&hellip;</p>
<h2>Custom Media Types</h2>
<p>If you have no clue about what I am talking about, no worries. I&rsquo;ll give you a quick primer on this using <a href="http://developer.github.com/v3/media/">the GitHub API</a> as an example. Since their API version 3, endpoints for the API (or &ldquo;resource addresses&rdquo;) will no longer change every version of the API. Instead, they will be parsing the <em>Accept</em> HTTP header to determine the incoming message version and the expected response version.</p>
<p>Getting a list of repositories from the API? The URL will always be <em>/users/repos</em>. However different incoming and outgoing responses are possible, varying based on their media types. Want to use the V3 message format in JSON? Use <em>application/vnd.github.v3+json</em>. Prefer the V3 message format in XML? Use<em> application/vnd.github.v3+xml</em>. Whenever they update their messages, they can add a new media type such as <em>application/vnd.github.v4</em> without changing any URL. Nifty trick, aye? Let&rsquo;s do this for our own API.</p>
<h2>IHttpControllerSelector</h2>
<p>The <em>IHttpControllerSelector</em> interface allows you to interfere in selecting the right controller for the current request. This is an ideal location for grabbing all contextual information and providing ASP.NET Web API with a controller based on that context.</p>
<div id="scid:9D7513F9-C04C-4721-824A-2B34F0212519:63070af6-b41b-499f-8fdb-88c3516ade38" class="wlWriterEditableSmartContent" style="float: none; margin: 0px; display: inline; padding: 0px;">
<pre style="width: 687px; height: 638px; background-color: white; overflow: auto;"><div><!--

Code highlighting produced by Actipro CodeHighlighter (freeware)
http://www.CodeHighlighter.com/

--><span style="color: #008080;">  1</span> <span style="color: #0000ff;">public</span><span style="color: #000000;"> </span><span style="color: #0000ff;">class</span><span style="color: #000000;"> AcceptHeaderControllerSelector </span><span style="color: #000000;">:</span><span style="color: #000000;"> IHttpControllerSelector
</span><span style="color: #008080;">  2</span> <span style="color: #000000;">{
</span><span style="color: #008080;">  3</span> <span style="color: #000000;">    </span><span style="color: #0000ff;">private</span><span style="color: #000000;"> </span><span style="color: #0000ff;">const</span><span style="color: #000000;"> </span><span style="color: #0000ff;">string</span><span style="color: #000000;"> ControllerKey </span><span style="color: #000000;">=</span><span style="color: #000000;"> </span><span style="color: #000000;">"</span><span style="color: #000000;">controller</span><span style="color: #000000;">"</span><span style="color: #000000;">;
</span><span style="color: #008080;">  4</span> <span style="color: #000000;">
</span><span style="color: #008080;">  5</span> <span style="color: #000000;">    </span><span style="color: #0000ff;">private</span><span style="color: #000000;"> readonly HttpConfiguration _configuration;
</span><span style="color: #008080;">  6</span> <span style="color: #000000;">    </span><span style="color: #0000ff;">private</span><span style="color: #000000;"> readonly Func</span><span style="color: #000000;">&lt;</span><span style="color: #000000;">MediaTypeHeaderValue</span><span style="color: #000000;">,</span><span style="color: #000000;"> </span><span style="color: #0000ff;">string</span><span style="color: #000000;">&gt;</span><span style="color: #000000;"> _namespaceResolver;
</span><span style="color: #008080;">  7</span> <span style="color: #000000;">    </span><span style="color: #0000ff;">private</span><span style="color: #000000;"> readonly Lazy</span><span style="color: #000000;">&lt;</span><span style="color: #000000;">Dictionary</span><span style="color: #000000;">&lt;</span><span style="color: #0000ff;">string</span><span style="color: #000000;">,</span><span style="color: #000000;"> HttpControllerDescriptor</span><span style="color: #000000;">&gt;&gt;</span><span style="color: #000000;"> _controllers;
</span><span style="color: #008080;">  8</span> <span style="color: #000000;">    </span><span style="color: #0000ff;">private</span><span style="color: #000000;"> readonly HashSet</span><span style="color: #000000;">&lt;</span><span style="color: #0000ff;">string</span><span style="color: #000000;">&gt;</span><span style="color: #000000;"> _duplicates;
</span><span style="color: #008080;">  9</span> <span style="color: #000000;">
</span><span style="color: #008080;"> 10</span> <span style="color: #000000;">    </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> AcceptHeaderControllerSelector(HttpConfiguration config</span><span style="color: #000000;">,</span><span style="color: #000000;"> Func</span><span style="color: #000000;">&lt;</span><span style="color: #000000;">MediaTypeHeaderValue</span><span style="color: #000000;">,</span><span style="color: #000000;"> </span><span style="color: #0000ff;">string</span><span style="color: #000000;">&gt;</span><span style="color: #000000;"> namespaceResolver)
</span><span style="color: #008080;"> 11</span> <span style="color: #000000;">    {
</span><span style="color: #008080;"> 12</span> <span style="color: #000000;">        _configuration </span><span style="color: #000000;">=</span><span style="color: #000000;"> config;
</span><span style="color: #008080;"> 13</span> <span style="color: #000000;">        _namespaceResolver </span><span style="color: #000000;">=</span><span style="color: #000000;"> namespaceResolver;
</span><span style="color: #008080;"> 14</span> <span style="color: #000000;">        _duplicates </span><span style="color: #000000;">=</span><span style="color: #000000;"> </span><span style="color: #0000ff;">new</span><span style="color: #000000;"> HashSet</span><span style="color: #000000;">&lt;</span><span style="color: #0000ff;">string</span><span style="color: #000000;">&gt;</span><span style="color: #000000;">(StringComparer</span><span style="color: #000000;">.</span><span style="color: #000000;">OrdinalIgnoreCase);
</span><span style="color: #008080;"> 15</span> <span style="color: #000000;">        _controllers </span><span style="color: #000000;">=</span><span style="color: #000000;"> </span><span style="color: #0000ff;">new</span><span style="color: #000000;"> Lazy</span><span style="color: #000000;">&lt;</span><span style="color: #000000;">Dictionary</span><span style="color: #000000;">&lt;</span><span style="color: #0000ff;">string</span><span style="color: #000000;">,</span><span style="color: #000000;"> HttpControllerDescriptor</span><span style="color: #000000;">&gt;&gt;</span><span style="color: #000000;">(InitializeControllerDictionary);
</span><span style="color: #008080;"> 16</span> <span style="color: #000000;">    }
</span><span style="color: #008080;"> 17</span> <span style="color: #000000;">
</span><span style="color: #008080;"> 18</span> <span style="color: #000000;">    </span><span style="color: #0000ff;">private</span><span style="color: #000000;"> Dictionary</span><span style="color: #000000;">&lt;</span><span style="color: #0000ff;">string</span><span style="color: #000000;">,</span><span style="color: #000000;"> HttpControllerDescriptor</span><span style="color: #000000;">&gt;</span><span style="color: #000000;"> InitializeControllerDictionary()
</span><span style="color: #008080;"> 19</span> <span style="color: #000000;">    {
</span><span style="color: #008080;"> 20</span> <span style="color: #000000;">        </span><span style="color: #0000ff;">var</span><span style="color: #000000;"> dictionary </span><span style="color: #000000;">=</span><span style="color: #000000;"> </span><span style="color: #0000ff;">new</span><span style="color: #000000;"> Dictionary</span><span style="color: #000000;">&lt;</span><span style="color: #0000ff;">string</span><span style="color: #000000;">,</span><span style="color: #000000;"> HttpControllerDescriptor</span><span style="color: #000000;">&gt;</span><span style="color: #000000;">(StringComparer</span><span style="color: #000000;">.</span><span style="color: #000000;">OrdinalIgnoreCase);
</span><span style="color: #008080;"> 21</span> <span style="color: #000000;">
</span><span style="color: #008080;"> 22</span> <span style="color: #000000;">        </span><span style="color: #008000;">//</span><span style="color: #008000;"> Create a lookup table where key is "namespace.controller". The value of "namespace" is the last
</span><span style="color: #008080;"> 23</span> <span style="color: #008000;">        // segment of the full namespace. For example:
</span><span style="color: #008080;"> 24</span> <span style="color: #008000;">        // MyApplication.Controllers.V1.ProductsController =&gt; "V1.Products"</span><span style="color: #008000;">
</span><span style="color: #008080;"> 25</span> <span style="color: #000000;">        IAssembliesResolver assembliesResolver </span><span style="color: #000000;">=</span><span style="color: #000000;"> _configuration</span><span style="color: #000000;">.</span><span style="color: #000000;">Services</span><span style="color: #000000;">.</span><span style="color: #000000;">GetAssembliesResolver();
</span><span style="color: #008080;"> 26</span> <span style="color: #000000;">        IHttpControllerTypeResolver controllersResolver </span><span style="color: #000000;">=</span><span style="color: #000000;"> _configuration</span><span style="color: #000000;">.</span><span style="color: #000000;">Services</span><span style="color: #000000;">.</span><span style="color: #000000;">GetHttpControllerTypeResolver();
</span><span style="color: #008080;"> 27</span> <span style="color: #000000;">
</span><span style="color: #008080;"> 28</span> <span style="color: #000000;">        ICollection</span><span style="color: #000000;">&lt;</span><span style="color: #000000;">Type</span><span style="color: #000000;">&gt;</span><span style="color: #000000;"> controllerTypes </span><span style="color: #000000;">=</span><span style="color: #000000;"> controllersResolver</span><span style="color: #000000;">.</span><span style="color: #000000;">GetControllerTypes(assembliesResolver);
</span><span style="color: #008080;"> 29</span> <span style="color: #000000;">
</span><span style="color: #008080;"> 30</span> <span style="color: #000000;">        </span><span style="color: #0000ff;">foreach</span><span style="color: #000000;"> (Type t in controllerTypes)
</span><span style="color: #008080;"> 31</span> <span style="color: #000000;">        {
</span><span style="color: #008080;"> 32</span> <span style="color: #000000;">            </span><span style="color: #0000ff;">var</span><span style="color: #000000;"> segments </span><span style="color: #000000;">=</span><span style="color: #000000;"> t</span><span style="color: #000000;">.</span><span style="color: #000000;">Namespace</span><span style="color: #000000;">.</span><span style="color: #008080;">Split</span><span style="color: #000000;">(Type</span><span style="color: #000000;">.</span><span style="color: #000000;">Delimiter);
</span><span style="color: #008080;"> 33</span> <span style="color: #000000;">
</span><span style="color: #008080;"> 34</span> <span style="color: #000000;">            </span><span style="color: #008000;">//</span><span style="color: #008000;"> For the dictionary key, strip "Controller" from the end of the type name.
</span><span style="color: #008080;"> 35</span> <span style="color: #008000;">            // This matches the behavior of DefaultHttpControllerSelector.</span><span style="color: #008000;">
</span><span style="color: #008080;"> 36</span> <span style="color: #000000;">            </span><span style="color: #0000ff;">var</span><span style="color: #000000;"> controllerName </span><span style="color: #000000;">=</span><span style="color: #000000;"> t</span><span style="color: #000000;">.</span><span style="color: #000000;">Name</span><span style="color: #000000;">.</span><span style="color: #000000;">Remove(t</span><span style="color: #000000;">.</span><span style="color: #000000;">Name</span><span style="color: #000000;">.</span><span style="color: #000000;">Length </span><span style="color: #000000;">-</span><span style="color: #000000;"> DefaultHttpControllerSelector</span><span style="color: #000000;">.</span><span style="color: #000000;">ControllerSuffix</span><span style="color: #000000;">.</span><span style="color: #000000;">Length);
</span><span style="color: #008080;"> 37</span> <span style="color: #000000;">
</span><span style="color: #008080;"> 38</span> <span style="color: #000000;">            </span><span style="color: #0000ff;">var</span><span style="color: #000000;"> </span><span style="color: #008080;">key</span><span style="color: #000000;"> </span><span style="color: #000000;">=</span><span style="color: #000000;"> </span><span style="color: #0000ff;">String</span><span style="color: #000000;">.</span><span style="color: #000000;">Format(CultureInfo</span><span style="color: #000000;">.</span><span style="color: #000000;">InvariantCulture</span><span style="color: #000000;">,</span><span style="color: #000000;"> </span><span style="color: #000000;">"</span><span style="color: #000000;">{0}.{1}</span><span style="color: #000000;">"</span><span style="color: #000000;">,</span><span style="color: #000000;"> segments[segments</span><span style="color: #000000;">.</span><span style="color: #000000;">Length </span><span style="color: #000000;">-</span><span style="color: #000000;"> </span><span style="color: #000000;">1</span><span style="color: #000000;">]</span><span style="color: #000000;">,</span><span style="color: #000000;"> controllerName);
</span><span style="color: #008080;"> 39</span> <span style="color: #000000;">
</span><span style="color: #008080;"> 40</span> <span style="color: #000000;">            </span><span style="color: #008000;">//</span><span style="color: #008000;"> Check for duplicate keys.</span><span style="color: #008000;">
</span><span style="color: #008080;"> 41</span> <span style="color: #000000;">            </span><span style="color: #0000ff;">if</span><span style="color: #000000;"> (dictionary</span><span style="color: #000000;">.</span><span style="color: #000000;">Keys</span><span style="color: #000000;">.</span><span style="color: #000000;">Contains(</span><span style="color: #008080;">key</span><span style="color: #000000;">))
</span><span style="color: #008080;"> 42</span> <span style="color: #000000;">            {
</span><span style="color: #008080;"> 43</span> <span style="color: #000000;">                _duplicates</span><span style="color: #000000;">.</span><span style="color: #000000;">Add(</span><span style="color: #008080;">key</span><span style="color: #000000;">);
</span><span style="color: #008080;"> 44</span> <span style="color: #000000;">            }
</span><span style="color: #008080;"> 45</span> <span style="color: #000000;">            </span><span style="color: #0000ff;">else</span><span style="color: #000000;">
</span><span style="color: #008080;"> 46</span> <span style="color: #000000;">            {
</span><span style="color: #008080;"> 47</span> <span style="color: #000000;">                dictionary[</span><span style="color: #008080;">key</span><span style="color: #000000;">] </span><span style="color: #000000;">=</span><span style="color: #000000;"> </span><span style="color: #0000ff;">new</span><span style="color: #000000;"> HttpControllerDescriptor(_configuration</span><span style="color: #000000;">,</span><span style="color: #000000;"> t</span><span style="color: #000000;">.</span><span style="color: #000000;">Name</span><span style="color: #000000;">,</span><span style="color: #000000;"> t);  
</span><span style="color: #008080;"> 48</span> <span style="color: #000000;">            }
</span><span style="color: #008080;"> 49</span> <span style="color: #000000;">        }
</span><span style="color: #008080;"> 50</span> <span style="color: #000000;">
</span><span style="color: #008080;"> 51</span> <span style="color: #000000;">        </span><span style="color: #008000;">//</span><span style="color: #008000;"> Remove any duplicates from the dictionary, because these create ambiguous matches. 
</span><span style="color: #008080;"> 52</span> <span style="color: #008000;">        // For example, "Foo.V1.ProductsController" and "Bar.V1.ProductsController" both map to "v1.products".</span><span style="color: #008000;">
</span><span style="color: #008080;"> 53</span> <span style="color: #000000;">        </span><span style="color: #0000ff;">foreach</span><span style="color: #000000;"> (</span><span style="color: #0000ff;">string</span><span style="color: #000000;"> s in _duplicates)
</span><span style="color: #008080;"> 54</span> <span style="color: #000000;">        {
</span><span style="color: #008080;"> 55</span> <span style="color: #000000;">            dictionary</span><span style="color: #000000;">.</span><span style="color: #000000;">Remove(s);
</span><span style="color: #008080;"> 56</span> <span style="color: #000000;">        }
</span><span style="color: #008080;"> 57</span> <span style="color: #000000;">        </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> dictionary;
</span><span style="color: #008080;"> 58</span> <span style="color: #000000;">    }
</span><span style="color: #008080;"> 59</span> <span style="color: #000000;">
</span><span style="color: #008080;"> 60</span> <span style="color: #000000;">    </span><span style="color: #008000;">//</span><span style="color: #008000;"> Get a value from the route data, if present.</span><span style="color: #008000;">
</span><span style="color: #008080;"> 61</span> <span style="color: #000000;">    </span><span style="color: #0000ff;">private</span><span style="color: #000000;"> </span><span style="color: #0000ff;">static</span><span style="color: #000000;"> T GetRouteVariable</span><span style="color: #000000;">&lt;</span><span style="color: #000000;">T</span><span style="color: #000000;">&gt;</span><span style="color: #000000;">(IHttpRouteData routeData</span><span style="color: #000000;">,</span><span style="color: #000000;"> </span><span style="color: #0000ff;">string</span><span style="color: #000000;"> name)
</span><span style="color: #008080;"> 62</span> <span style="color: #000000;">    {
</span><span style="color: #008080;"> 63</span> <span style="color: #000000;">        </span><span style="color: #0000ff;">object</span><span style="color: #000000;"> result </span><span style="color: #000000;">=</span><span style="color: #000000;"> </span><span style="color: #0000ff;">null</span><span style="color: #000000;">;
</span><span style="color: #008080;"> 64</span> <span style="color: #000000;">        </span><span style="color: #0000ff;">if</span><span style="color: #000000;"> (routeData</span><span style="color: #000000;">.</span><span style="color: #000000;">Values</span><span style="color: #000000;">.</span><span style="color: #000000;">TryGetValue(name</span><span style="color: #000000;">,</span><span style="color: #000000;"> out result))
</span><span style="color: #008080;"> 65</span> <span style="color: #000000;">        {
</span><span style="color: #008080;"> 66</span> <span style="color: #000000;">            </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> (T)result;
</span><span style="color: #008080;"> 67</span> <span style="color: #000000;">        }
</span><span style="color: #008080;"> 68</span> <span style="color: #000000;">        </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> </span><span style="color: #0000ff;">default</span><span style="color: #000000;">(T);
</span><span style="color: #008080;"> 69</span> <span style="color: #000000;">    }
</span><span style="color: #008080;"> 70</span> <span style="color: #000000;">
</span><span style="color: #008080;"> 71</span> <span style="color: #000000;">    </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> HttpControllerDescriptor SelectController(HttpRequestMessage request)
</span><span style="color: #008080;"> 72</span> <span style="color: #000000;">    {
</span><span style="color: #008080;"> 73</span> <span style="color: #000000;">        IHttpRouteData routeData </span><span style="color: #000000;">=</span><span style="color: #000000;"> request</span><span style="color: #000000;">.</span><span style="color: #000000;">GetRouteData();
</span><span style="color: #008080;"> 74</span> <span style="color: #000000;">        </span><span style="color: #0000ff;">if</span><span style="color: #000000;"> (routeData </span><span style="color: #000000;">==</span><span style="color: #000000;"> </span><span style="color: #0000ff;">null</span><span style="color: #000000;">)
</span><span style="color: #008080;"> 75</span> <span style="color: #000000;">        {
</span><span style="color: #008080;"> 76</span> <span style="color: #000000;">            </span><span style="color: #0000ff;">throw</span><span style="color: #000000;"> </span><span style="color: #0000ff;">new</span><span style="color: #000000;"> HttpResponseException(HttpStatusCode</span><span style="color: #000000;">.</span><span style="color: #000000;">NotFound);
</span><span style="color: #008080;"> 77</span> <span style="color: #000000;">        }
</span><span style="color: #008080;"> 78</span> <span style="color: #000000;">
</span><span style="color: #008080;"> 79</span> <span style="color: #000000;">        </span><span style="color: #008000;">//</span><span style="color: #008000;"> Get the namespace and controller variables from the route data.</span><span style="color: #008000;">
</span><span style="color: #008080;"> 80</span> <span style="color: #000000;">        </span><span style="color: #0000ff;">string</span><span style="color: #000000;"> namespaceName </span><span style="color: #000000;">=</span><span style="color: #000000;"> </span><span style="color: #0000ff;">null</span><span style="color: #000000;">;
</span><span style="color: #008080;"> 81</span> <span style="color: #000000;">        </span><span style="color: #0000ff;">foreach</span><span style="color: #000000;"> (</span><span style="color: #0000ff;">var</span><span style="color: #000000;"> accepts in request</span><span style="color: #000000;">.</span><span style="color: #000000;">Headers</span><span style="color: #000000;">.</span><span style="color: #000000;">Accept)
</span><span style="color: #008080;"> 82</span> <span style="color: #000000;">        {
</span><span style="color: #008080;"> 83</span> <span style="color: #000000;">            namespaceName </span><span style="color: #000000;">=</span><span style="color: #000000;"> _namespaceResolver(accepts);
</span><span style="color: #008080;"> 84</span> <span style="color: #000000;">            </span><span style="color: #0000ff;">if</span><span style="color: #000000;"> (namespaceName </span><span style="color: #000000;">!=</span><span style="color: #000000;"> </span><span style="color: #0000ff;">null</span><span style="color: #000000;">)
</span><span style="color: #008080;"> 85</span> <span style="color: #000000;">            {
</span><span style="color: #008080;"> 86</span> <span style="color: #000000;">                </span><span style="color: #0000ff;">break</span><span style="color: #000000;">;
</span><span style="color: #008080;"> 87</span> <span style="color: #000000;">            }
</span><span style="color: #008080;"> 88</span> <span style="color: #000000;">        } 
</span><span style="color: #008080;"> 89</span> <span style="color: #000000;">        </span><span style="color: #0000ff;">if</span><span style="color: #000000;"> (namespaceName </span><span style="color: #000000;">==</span><span style="color: #000000;"> </span><span style="color: #0000ff;">null</span><span style="color: #000000;">)
</span><span style="color: #008080;"> 90</span> <span style="color: #000000;">        {
</span><span style="color: #008080;"> 91</span> <span style="color: #000000;">            </span><span style="color: #0000ff;">throw</span><span style="color: #000000;"> </span><span style="color: #0000ff;">new</span><span style="color: #000000;"> HttpResponseException(HttpStatusCode</span><span style="color: #000000;">.</span><span style="color: #000000;">NotFound);
</span><span style="color: #008080;"> 92</span> <span style="color: #000000;">        }
</span><span style="color: #008080;"> 93</span> <span style="color: #000000;">
</span><span style="color: #008080;"> 94</span> <span style="color: #000000;">        </span><span style="color: #0000ff;">string</span><span style="color: #000000;"> controllerName </span><span style="color: #000000;">=</span><span style="color: #000000;"> GetRouteVariable</span><span style="color: #000000;">&lt;</span><span style="color: #0000ff;">string</span><span style="color: #000000;">&gt;</span><span style="color: #000000;">(routeData</span><span style="color: #000000;">,</span><span style="color: #000000;"> ControllerKey);
</span><span style="color: #008080;"> 95</span> <span style="color: #000000;">        </span><span style="color: #0000ff;">if</span><span style="color: #000000;"> (controllerName </span><span style="color: #000000;">==</span><span style="color: #000000;"> </span><span style="color: #0000ff;">null</span><span style="color: #000000;">)
</span><span style="color: #008080;"> 96</span> <span style="color: #000000;">        {
</span><span style="color: #008080;"> 97</span> <span style="color: #000000;">            </span><span style="color: #0000ff;">throw</span><span style="color: #000000;"> </span><span style="color: #0000ff;">new</span><span style="color: #000000;"> HttpResponseException(HttpStatusCode</span><span style="color: #000000;">.</span><span style="color: #000000;">NotFound);
</span><span style="color: #008080;"> 98</span> <span style="color: #000000;">        }
</span><span style="color: #008080;"> 99</span> <span style="color: #000000;">
</span><span style="color: #008080;">100</span> <span style="color: #000000;">        </span><span style="color: #008000;">//</span><span style="color: #008000;"> Find a matching controller.</span><span style="color: #008000;">
</span><span style="color: #008080;">101</span> <span style="color: #000000;">        </span><span style="color: #0000ff;">string</span><span style="color: #000000;"> </span><span style="color: #008080;">key</span><span style="color: #000000;"> </span><span style="color: #000000;">=</span><span style="color: #000000;"> </span><span style="color: #0000ff;">String</span><span style="color: #000000;">.</span><span style="color: #000000;">Format(CultureInfo</span><span style="color: #000000;">.</span><span style="color: #000000;">InvariantCulture</span><span style="color: #000000;">,</span><span style="color: #000000;"> </span><span style="color: #000000;">"</span><span style="color: #000000;">{0}.{1}</span><span style="color: #000000;">"</span><span style="color: #000000;">,</span><span style="color: #000000;"> namespaceName</span><span style="color: #000000;">,</span><span style="color: #000000;"> controllerName);
</span><span style="color: #008080;">102</span> <span style="color: #000000;">
</span><span style="color: #008080;">103</span> <span style="color: #000000;">        HttpControllerDescriptor controllerDescriptor;
</span><span style="color: #008080;">104</span> <span style="color: #000000;">        </span><span style="color: #0000ff;">if</span><span style="color: #000000;"> (_controllers</span><span style="color: #000000;">.</span><span style="color: #000000;">Value</span><span style="color: #000000;">.</span><span style="color: #000000;">TryGetValue(</span><span style="color: #008080;">key</span><span style="color: #000000;">,</span><span style="color: #000000;"> out controllerDescriptor))
</span><span style="color: #008080;">105</span> <span style="color: #000000;">        {
</span><span style="color: #008080;">106</span> <span style="color: #000000;">            </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> controllerDescriptor;
</span><span style="color: #008080;">107</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">108</span> <span style="color: #000000;">        </span><span style="color: #0000ff;">else</span><span style="color: #000000;"> </span><span style="color: #0000ff;">if</span><span style="color: #000000;"> (_duplicates</span><span style="color: #000000;">.</span><span style="color: #000000;">Contains(</span><span style="color: #008080;">key</span><span style="color: #000000;">))
</span><span style="color: #008080;">109</span> <span style="color: #000000;">        {
</span><span style="color: #008080;">110</span> <span style="color: #000000;">            </span><span style="color: #0000ff;">throw</span><span style="color: #000000;"> </span><span style="color: #0000ff;">new</span><span style="color: #000000;"> HttpResponseException(
</span><span style="color: #008080;">111</span> <span style="color: #000000;">                request</span><span style="color: #000000;">.</span><span style="color: #000000;">CreateErrorResponse(HttpStatusCode</span><span style="color: #000000;">.</span><span style="color: #000000;">InternalServerError</span><span style="color: #000000;">,</span><span style="color: #000000;">
</span><span style="color: #008080;">112</span> <span style="color: #000000;">                </span><span style="color: #000000;">"</span><span style="color: #000000;">Multiple controllers were found that match this request.</span><span style="color: #000000;">"</span><span style="color: #000000;">));
</span><span style="color: #008080;">113</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">114</span> <span style="color: #000000;">        </span><span style="color: #0000ff;">else</span><span style="color: #000000;">
</span><span style="color: #008080;">115</span> <span style="color: #000000;">        {
</span><span style="color: #008080;">116</span> <span style="color: #000000;">            </span><span style="color: #0000ff;">throw</span><span style="color: #000000;"> </span><span style="color: #0000ff;">new</span><span style="color: #000000;"> HttpResponseException(HttpStatusCode</span><span style="color: #000000;">.</span><span style="color: #000000;">NotFound);
</span><span style="color: #008080;">117</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">118</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">119</span> <span style="color: #000000;">
</span><span style="color: #008080;">120</span> <span style="color: #000000;">    </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> IDictionary</span><span style="color: #000000;">&lt;</span><span style="color: #0000ff;">string</span><span style="color: #000000;">,</span><span style="color: #000000;"> HttpControllerDescriptor</span><span style="color: #000000;">&gt;</span><span style="color: #000000;"> GetControllerMapping()
</span><span style="color: #008080;">121</span> <span style="color: #000000;">    {
</span><span style="color: #008080;">122</span> <span style="color: #000000;">        </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> _controllers</span><span style="color: #000000;">.</span><span style="color: #000000;">Value;
</span><span style="color: #008080;">123</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">124</span> <span style="color: #000000;">}</span></div></pre>
<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>
<p>To be honest, I did not write much code in this. I grabbed the <em>IHttpControllerSelector</em> implementation <a href="http://aspnet.codeplex.com/SourceControl/changeset/view/0e68a22781fd#Samples/WebApi/NamespaceControllerSelector/ReadMe.txt">from the sample on CodePlex</a> and added just these lines to check the <em>Accept</em> header instead.</p>
<div id="scid:9D7513F9-C04C-4721-824A-2B34F0212519:d37ba3fc-cfe6-4c45-8034-50eb77e30b0b" class="wlWriterEditableSmartContent" style="float: none; margin: 0px; display: inline; padding: 0px;">
<pre style="width: 687px; height: 225px; background-color: white; overflow: auto;"><div><!--

Code highlighting produced by Actipro CodeHighlighter (freeware)
http://www.CodeHighlighter.com/

--><span style="color: #008080;"> 1</span> <span style="color: #008000;">//</span><span style="color: #008000;"> Get the namespace and controller variables from the route data.</span><span style="color: #008000;">
</span><span style="color: #008080;"> 2</span> <span style="color: #0000ff;">string</span><span style="color: #000000;"> namespaceName </span><span style="color: #000000;">=</span><span style="color: #000000;"> </span><span style="color: #0000ff;">null</span><span style="color: #000000;">;
</span><span style="color: #008080;"> 3</span> <span style="color: #0000ff;">foreach</span><span style="color: #000000;"> (</span><span style="color: #0000ff;">var</span><span style="color: #000000;"> accepts in request</span><span style="color: #000000;">.</span><span style="color: #000000;">Headers</span><span style="color: #000000;">.</span><span style="color: #000000;">Accept)
</span><span style="color: #008080;"> 4</span> <span style="color: #000000;">{
</span><span style="color: #008080;"> 5</span> <span style="color: #000000;">    namespaceName </span><span style="color: #000000;">=</span><span style="color: #000000;"> _namespaceResolver(accepts);
</span><span style="color: #008080;"> 6</span> <span style="color: #000000;">    </span><span style="color: #0000ff;">if</span><span style="color: #000000;"> (namespaceName </span><span style="color: #000000;">!=</span><span style="color: #000000;"> </span><span style="color: #0000ff;">null</span><span style="color: #000000;">)
</span><span style="color: #008080;"> 7</span> <span style="color: #000000;">    {
</span><span style="color: #008080;"> 8</span> <span style="color: #000000;">        </span><span style="color: #0000ff;">break</span><span style="color: #000000;">;
</span><span style="color: #008080;"> 9</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">10</span> <span style="color: #000000;">} 
</span><span style="color: #008080;">11</span> <span style="color: #0000ff;">if</span><span style="color: #000000;"> (namespaceName </span><span style="color: #000000;">==</span><span style="color: #000000;"> </span><span style="color: #0000ff;">null</span><span style="color: #000000;">)
</span><span style="color: #008080;">12</span> <span style="color: #000000;">{
</span><span style="color: #008080;">13</span> <span style="color: #000000;">    </span><span style="color: #0000ff;">throw</span><span style="color: #000000;"> </span><span style="color: #0000ff;">new</span><span style="color: #000000;"> HttpResponseException(HttpStatusCode</span><span style="color: #000000;">.</span><span style="color: #000000;">NotFound);
</span><span style="color: #008080;">14</span> <span style="color: #000000;">}</span></div></pre>
<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>
<p>The real logic in finding out the version that is called is delegated to the user of this <em>IHttpControllerSelector</em>. Let&rsquo;s wire it up!</p>
<h2>Wiring it up</h2>
<p>ASP.NET Web API has a lot of &ldquo;plugs&rdquo;, among which there&rsquo;s one where we can plug in our custom <em>IHttpControllerSelector</em>, Let&rsquo;s override the default one and add our own:</p>
<div id="scid:9D7513F9-C04C-4721-824A-2B34F0212519:4d11e0e2-566f-4552-be5e-ded756e672f1" class="wlWriterEditableSmartContent" style="float: none; margin: 0px; display: inline; padding: 0px;">
<pre style="width: 687px; height: 280px; background-color: white; overflow: auto;"><div><!--

Code highlighting produced by Actipro CodeHighlighter (freeware)
http://www.CodeHighlighter.com/

--><span style="color: #008080;"> 1</span> <span style="color: #000000;">config</span><span style="color: #000000;">.</span><span style="color: #000000;">Services</span><span style="color: #000000;">.</span><span style="color: #000000;">Replace(typeof(IHttpControllerSelector)</span><span style="color: #000000;">,</span><span style="color: #000000;">
</span><span style="color: #008080;"> 2</span> <span style="color: #000000;">    </span><span style="color: #0000ff;">new</span><span style="color: #000000;"> AcceptHeaderControllerSelector(config</span><span style="color: #000000;">,</span><span style="color: #000000;"> accept </span><span style="color: #000000;">=&gt;</span><span style="color: #000000;">
</span><span style="color: #008080;"> 3</span> <span style="color: #000000;">        {
</span><span style="color: #008080;"> 4</span> <span style="color: #000000;">            </span><span style="color: #0000ff;">foreach</span><span style="color: #000000;"> (</span><span style="color: #0000ff;">var</span><span style="color: #000000;"> parameter in accept</span><span style="color: #000000;">.</span><span style="color: #000000;">Parameters)
</span><span style="color: #008080;"> 5</span> <span style="color: #000000;">            {
</span><span style="color: #008080;"> 6</span> <span style="color: #000000;">                </span><span style="color: #0000ff;">if</span><span style="color: #000000;"> (parameter</span><span style="color: #000000;">.</span><span style="color: #000000;">Name</span><span style="color: #000000;">.</span><span style="color: #000000;">Equals(</span><span style="color: #000000;">"</span><span style="color: #000000;">version</span><span style="color: #000000;">"</span><span style="color: #000000;">,</span><span style="color: #000000;"> StringComparison</span><span style="color: #000000;">.</span><span style="color: #000000;">InvariantCultureIgnoreCase))
</span><span style="color: #008080;"> 7</span> <span style="color: #000000;">                {
</span><span style="color: #008080;"> 8</span> <span style="color: #000000;">                    </span><span style="color: #0000ff;">switch</span><span style="color: #000000;"> (parameter</span><span style="color: #000000;">.</span><span style="color: #000000;">Value)
</span><span style="color: #008080;"> 9</span> <span style="color: #000000;">                    {
</span><span style="color: #008080;">10</span> <span style="color: #000000;">                        </span><span style="color: #0000ff;">case</span><span style="color: #000000;"> </span><span style="color: #000000;">"</span><span style="color: #000000;">1.0</span><span style="color: #000000;">"</span><span style="color: #000000;">:</span><span style="color: #000000;"> </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> </span><span style="color: #000000;">"</span><span style="color: #000000;">v1</span><span style="color: #000000;">"</span><span style="color: #000000;">;
</span><span style="color: #008080;">11</span> <span style="color: #000000;">                        </span><span style="color: #0000ff;">case</span><span style="color: #000000;"> </span><span style="color: #000000;">"</span><span style="color: #000000;">2.0</span><span style="color: #000000;">"</span><span style="color: #000000;">:</span><span style="color: #000000;"> </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> </span><span style="color: #000000;">"</span><span style="color: #000000;">v2</span><span style="color: #000000;">"</span><span style="color: #000000;">;
</span><span style="color: #008080;">12</span> <span style="color: #000000;">                    }
</span><span style="color: #008080;">13</span> <span style="color: #000000;">                }
</span><span style="color: #008080;">14</span> <span style="color: #000000;">            }
</span><span style="color: #008080;">15</span> <span style="color: #000000;">            
</span><span style="color: #008080;">16</span> <span style="color: #000000;">            </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> </span><span style="color: #000000;">"</span><span style="color: #000000;">v2</span><span style="color: #000000;">"</span><span style="color: #000000;">; </span><span style="color: #008000;">//</span><span style="color: #008000;"> default namespace, return null to throw 404 when namespace not given</span><span style="color: #008000;">
</span><span style="color: #008080;">17</span> <span style="color: #000000;">        }));</span></div></pre>
<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>
<p>As you can see, we can pass in a lambda which gets called with the contents of the <em>Accept</em> header and must return the namespace obtained from the header. The above example will work when using the version property of a header, e.g.: <em>application/json;version=1.0</em> and <em>application/json;version=2.0</em>. The last statement returns &ldquo;v2&rdquo; as the default version when no specific media header is given. Return <em>null</em> if you want this to result in a <em>404 Page Not Found</em>.</p>
<p><span style="text-decoration: underline;">Using this header scheme is recommended</span> but of course other options are possible. It&rsquo;s <em>your</em> lambda!</p>
<p>Another approach would be going "GitHub style" and use things like <em>application/vnd.api.v1+json </em>and similar?</p>
<div id="scid:9D7513F9-C04C-4721-824A-2B34F0212519:fd90fa2c-60c4-4be1-9be1-a7bb7139201a" class="wlWriterEditableSmartContent" style="float: none; margin: 0px; display: inline; padding: 0px;">
<pre style="width: 687px; height: 168px; background-color: white; overflow: auto;"><div><!--

Code highlighting produced by Actipro CodeHighlighter (freeware)
http://www.CodeHighlighter.com/

--><span style="color: #008080;"> 1</span> <span style="color: #000000;">config</span><span style="color: #000000;">.</span><span style="color: #000000;">Services</span><span style="color: #000000;">.</span><span style="color: #000000;">Replace(typeof(IHttpControllerSelector)</span><span style="color: #000000;">,</span><span style="color: #000000;">
</span><span style="color: #008080;"> 2</span> <span style="color: #000000;">    </span><span style="color: #0000ff;">new</span><span style="color: #000000;"> AcceptHeaderControllerSelector(config</span><span style="color: #000000;">,</span><span style="color: #000000;"> accept </span><span style="color: #000000;">=&gt;</span><span style="color: #000000;">
</span><span style="color: #008080;"> 3</span> <span style="color: #000000;">        {
</span><span style="color: #008080;"> 4</span> <span style="color: #000000;">            </span><span style="color: #0000ff;">var</span><span style="color: #000000;"> matches </span><span style="color: #000000;">=</span><span style="color: #000000;"> Regex</span><span style="color: #000000;">.</span><span style="color: #000000;">Match(accept</span><span style="color: #000000;">.</span><span style="color: #000000;">MediaType</span><span style="color: #000000;">,</span><span style="color: #000000;"> @</span><span style="color: #000000;">"</span><span style="color: #000000;">application\/vnd.api.(.*)\+.*</span><span style="color: #000000;">"</span><span style="color: #000000;">);
</span><span style="color: #008080;"> 5</span> <span style="color: #000000;">            </span><span style="color: #0000ff;">if</span><span style="color: #000000;"> (matches</span><span style="color: #000000;">.</span><span style="color: #000000;">Groups</span><span style="color: #000000;">.</span><span style="color: #008080;">Count</span><span style="color: #000000;"> </span><span style="color: #000000;">&gt;=</span><span style="color: #000000;"> </span><span style="color: #000000;">2</span><span style="color: #000000;">)
</span><span style="color: #008080;"> 6</span> <span style="color: #000000;">            {
</span><span style="color: #008080;"> 7</span> <span style="color: #000000;">                </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> matches</span><span style="color: #000000;">.</span><span style="color: #000000;">Groups[</span><span style="color: #000000;">1</span><span style="color: #000000;">]</span><span style="color: #000000;">.</span><span style="color: #000000;">Value;
</span><span style="color: #008080;"> 8</span> <span style="color: #000000;">            }
</span><span style="color: #008080;"> 9</span> <span style="color: #000000;">            </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> </span><span style="color: #000000;">"</span><span style="color: #000000;">v2</span><span style="color: #000000;">"</span><span style="color: #000000;">; </span><span style="color: #008000;">//</span><span style="color: #008000;"> default namespace, return null to throw 404 when namespace not given</span><span style="color: #008000;">
</span><span style="color: #008080;">10</span> <span style="color: #000000;">        }));</span></div></pre>
<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>
<p>Note that when using the GitHub-style media type, it&rsquo;s best to also configure the default media type formatters to recognize these new types. That way you can even use different media type formats for each API version.</p>
<div id="scid:9D7513F9-C04C-4721-824A-2B34F0212519:b4c5456d-0631-46ac-969b-61656df81650" class="wlWriterEditableSmartContent" style="float: none; margin: 0px; display: inline; padding: 0px;">
<pre style="width: 687px; height: 113px; background-color: white; overflow: auto;"><div><!--

Code highlighting produced by Actipro CodeHighlighter (freeware)
http://www.CodeHighlighter.com/

--><span style="color: #008080;">1</span> <span style="color: #008000;">//</span><span style="color: #008000;"> Add custom media types as supported to their default formatters</span><span style="color: #008000;">
</span><span style="color: #008080;">2</span> <span style="color: #000000;">config.Formatters.JsonFormatter.SupportedMediaTypes.Add(</span><span style="color: #0000ff;">new</span><span style="color: #000000;"> MediaTypeWithQualityHeaderValue(</span><span style="color: #800000;">"</span><span style="color: #800000;">application/vnd.api.v1+json</span><span style="color: #800000;">"</span><span style="color: #000000;">));
</span><span style="color: #008080;">3</span> <span style="color: #000000;">config.Formatters.JsonFormatter.SupportedMediaTypes.Add(</span><span style="color: #0000ff;">new</span><span style="color: #000000;"> MediaTypeWithQualityHeaderValue(</span><span style="color: #800000;">"</span><span style="color: #800000;">application/vnd.api.v2+json</span><span style="color: #800000;">"</span><span style="color: #000000;">));
</span><span style="color: #008080;">4</span> <span style="color: #000000;">
</span><span style="color: #008080;">5</span> <span style="color: #000000;">config.Formatters.XmlFormatter.SupportedMediaTypes.Add(</span><span style="color: #0000ff;">new</span><span style="color: #000000;"> MediaTypeWithQualityHeaderValue(</span><span style="color: #800000;">"</span><span style="color: #800000;">application/vnd.api.v1+xml</span><span style="color: #800000;">"</span><span style="color: #000000;">));
</span><span style="color: #008080;">6</span> <span style="color: #000000;">config.Formatters.XmlFormatter.SupportedMediaTypes.Add(</span><span style="color: #0000ff;">new</span><span style="color: #000000;"> MediaTypeWithQualityHeaderValue(</span><span style="color: #800000;">"</span><span style="color: #800000;">application/vnd.api.v2+xml</span><span style="color: #800000;">"</span><span style="color: #000000;">));</span></div></pre>
<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>
<p>That&rsquo;s basically it. We can now implement our controllers in different namespaces, like so:</p>
<div id="scid:9D7513F9-C04C-4721-824A-2B34F0212519:6fce90c8-cfbd-414e-a2c1-b20bcd45c638" class="wlWriterEditableSmartContent" style="float: none; margin: 0px; display: inline; padding: 0px;">
<pre style="width: 687px; height: 313px; background-color: white; overflow: auto;"><div><!--

Code highlighting produced by Actipro CodeHighlighter (freeware)
http://www.CodeHighlighter.com/

--><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">namespace</span><span style="color: #000000;"> TestSelector.Controllers.V1
</span><span style="color: #008080;"> 2</span> <span style="color: #000000;">{
</span><span style="color: #008080;"> 3</span> <span style="color: #000000;">    </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> </span><span style="color: #0000ff;">class</span><span style="color: #000000;"> ValuesController : ApiController
</span><span style="color: #008080;"> 4</span> <span style="color: #000000;">    {
</span><span style="color: #008080;"> 5</span> <span style="color: #000000;">        </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> </span><span style="color: #0000ff;">string</span><span style="color: #000000;"> Get()
</span><span style="color: #008080;"> 6</span> <span style="color: #000000;">        {
</span><span style="color: #008080;"> 7</span> <span style="color: #000000;">            </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> </span><span style="color: #800000;">"</span><span style="color: #800000;">This is a V1 response.</span><span style="color: #800000;">"</span><span style="color: #000000;">;
</span><span style="color: #008080;"> 8</span> <span style="color: #000000;">        }
</span><span style="color: #008080;"> 9</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">10</span> <span style="color: #000000;">}
</span><span style="color: #008080;">11</span> <span style="color: #000000;">
</span><span style="color: #008080;">12</span> <span style="color: #0000ff;">namespace</span><span style="color: #000000;"> TestSelector.Controllers.V2
</span><span style="color: #008080;">13</span> <span style="color: #000000;">{
</span><span style="color: #008080;">14</span> <span style="color: #000000;">    </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> </span><span style="color: #0000ff;">class</span><span style="color: #000000;"> ValuesController : ApiController
</span><span style="color: #008080;">15</span> <span style="color: #000000;">    {
</span><span style="color: #008080;">16</span> <span style="color: #000000;">        </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> </span><span style="color: #0000ff;">string</span><span style="color: #000000;"> Get()
</span><span style="color: #008080;">17</span> <span style="color: #000000;">        {
</span><span style="color: #008080;">18</span> <span style="color: #000000;">            </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> </span><span style="color: #800000;">"</span><span style="color: #800000;">This is a V2 response.</span><span style="color: #800000;">"</span><span style="color: #000000;">;
</span><span style="color: #008080;">19</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">20</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">21</span> <span style="color: #000000;">}</span></div></pre>
<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>
<p>When providing different <em>Accept </em>headers, we now get routed to the correct namespace depending on our custom media type. REST maturity level up!</p>
<p>I&rsquo;ve issued a pull request on the <a href="http://aspnet.codeplex.com/SourceControl/BrowseLatest">official samples page</a>, in the meanwhile here&rsquo;s the download: <a href="/files/2013/3/AcceptHeaderControllerSelector.zip">AcceptHeaderControllerSelector.zip (238.43 kb)</a></p>
<p>Enjoy!</p>
<p><strong>[edit]</strong> there's a project on GitHub containing other implementations as well, check <a rel="nofollow" href="http://github.com/Sebazzz/SDammann.WebApi.Versioning">http://github.com/Sebazzz/SDammann.WebApi.Versioning</a></p>
{% include imported_disclaimer.html %}
