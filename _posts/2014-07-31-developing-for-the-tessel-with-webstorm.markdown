---
layout: post
title: "Developing for the Tessel with WebStorm"
date: 2014-07-31 15:21:00 +0000
comments: true
published: true
categories: ["post"]
tags: ["General", "JavaScript", "Projects"]
alias: ["/post/2014/07/31/Developing-for-the-Tessel-with-WebStorm.aspx", "/post/2014/07/31/developing-for-the-tessel-with-webstorm.aspx"]
author: Maarten Balliauw
redirect_from:
 - /post/2014/07/31/Developing-for-the-Tessel-with-WebStorm.aspx.html
 - /post/2014/07/31/developing-for-the-tessel-with-webstorm.aspx.html
---
<p><a href="/images/image_thumb%5B1%5D.png"><img width="240" height="64" title="image_thumb[1]" align="right" style="margin: 0px 0px 0px 5px; border: 0px currentColor; border-image: none; padding-top: 0px; padding-right: 0px; padding-left: 0px; float: right; display: inline; background-image: none;" alt="image_thumb[1]" src="/images/image_thumb%5B1%5D_thumb.png" border="0"></a>In a <a href="/post/2014/07/30/Getting-Started-with-the-Tessel.aspx">previous post</a>, I mentioned that (finally) my <a href="http://tessel.io">Tessel</a> arrived, “an internet-connected microcontroller programmable in JavaScript”. I like <a href="http://www.jetbrains.com/webstorm">WebStorm</a> a lot as an IDE, and since the Tessel runs on JavaScript code (via node), why not see if WebStorm can be more than just an editor for Tessel development…</p> <h2>Developing JavaScript</h2> <p>The Tessel runs JavaScript, so naturally a JavaScript IDE like <a href="http://www.jetbrains.com/webstorm">WebStorm</a> will be splendid at that part. It provides a project system, code completion, navigation, inspections to check whether my code is as it should be (which from the screenshot below, it is not, yet ;-)) and so on.</p> <p><a href="/images/image_333.png"><img width="640" height="416" title="WebStorm Tessel Node JavaScript" style="border: 0px currentColor; border-image: none; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;" alt="WebStorm Tessel Node JavaScript" src="/images/image_thumb_293.png" border="0"></a></p> <p>What I like a lot is that everything related to the device-side of my project (a thermometer thing that posts data to the Internet), is in one place. The project system ensures the IDE can be intelligent about code completion and navigation, I can see the npm modules I have installed, I can use version control and directly push my changes back to a GitHub repository. The Terminal tool window lets me run the Tessel command line to run scripts and so on. No fiddling with additional tools so far!</p> <h2>Tessel Command Line Tools</h2> <p>As I explained in a previous blog post, the Tessel comes with a command line that is used toconnect the thing to WiFi, run and deploy scripts and read logs off it (and more). I admit it: I am bad at command line things. After a long time, commands get engraved in my memory and I’m quite fast at using them, but new command line tools, like Tessel’s, are something that I always struggle with at the start.</p> <p>To help me learn, I thought I’d add the Tessel command line to WebStorm’s Command Line Tools. Through the <strong><em>Project Settings | Command Line Tool Support</em></strong>,, I added the path to Tessel’s tool (%APPDATA%\npm\tessel.cmd). Note that you may have to install the <em>Command Line Tools Plugin</em> into WebStorm, I’m unsure if it’s bundled.</p> <p><a href="/images/image_334.png"><img width="240" height="183" title="Tessel Command Line" style="border: 0px currentColor; border-image: none; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;" alt="Tessel Command Line" src="/images/image_thumb_294.png" border="0"></a>&nbsp;</p> <p>This helps in getting the Tessel commands available in the Command Line Tools after pressign <strong>Ctrl+Shift+X</strong> (or <strong><em>Tools | Run Command…</em></strong>), but it still does not help me in learning this new command’s syntax, right? Copy <a href="https://gist.github.com/maartenba/ca34d115a3f29132cb0e">this gist</a> into <em>C:\Users\&lt;your username&gt;\.WebStorm8\config\commandlinetools\Custom_tessel.xml</em> and behold: completion for these commands!</p> <p><a href="/images/image_335.png"><img width="644" height="420" title="Tessel command line auto completion" style="border: 0px currentColor; border-image: none; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;" alt="Tessel command line auto completion" src="/images/image_thumb_295.png" border="0"></a></p> <p>Again, I consider them as training wheels until I start memorizing the commands. I can remember <em>tessel run</em>, but it’s all the one’s that I’m not using cntinuously that I tend to forget…</p> <h2>Running Code on the Tessel</h2> <p>Running code on the Tessel can be done using the <em>tessel run &lt;script.js&gt; </em>command. However, I dislike having to always jump into a console or even the command line tools mentioned earlier to just run and see if things work. WebStorm has the concept of Run/Debug Configurations, where using a simple keystroke (<strong><em>Shift+F10</em></strong>) I can run the active configuration without having to switch my brain context to a console.</p> <p>I created two configurations: one that runs nodejs on my own computer so I can test some things, and one that invokes <em>tessel run</em>. Provide the path to node, set the working directory to the current project folder, specify the Tessel command line script as the file to execute and provide <em>run somescript.js</em> as the parameters. </p> <p><a href="/images/image_336.png"><img width="640" height="331" title="Tessel Run" style="border: 0px currentColor; border-image: none; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;" alt="Tessel Run" src="/images/image_thumb_296.png" border="0"></a></p> <p>Quick note here: after a few massive errors coming from Tessel’s command line tool that mentioned the device only supports one connection, it’s bes tto check the <em>Single instance only </em>box for the run configuration. This ensures the process is killed and restarted whenever the script is ran.</p> <p>Save, <strong><em>Shift+F10</em></strong> and we’re deploying and running whenever we want to test our code.</p> <p><a href="/images/image_337.png"><img width="640" height="416" title="Run code on Tessel from WebStorm" style="border: 0px currentColor; border-image: none; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;" alt="Run code on Tessel from WebStorm" src="/images/image_thumb_297.png" border="0"></a></p> <p>Debugging does not work, as the Tessel does not support this. I hope support for it will be added, ideally using the V8 debugger so WebStorm can hook into it, too. Currently I’m doing “poor man’s debugging”: dumping variables using <em>console.log()</em> mostly…</p> <h2>External Tools</h2> <p>When I first added Tessel to WebStorm, I figured it would be nice to have some menu entries to invoke commands like updating the firmware (a weekly task,Tessel is being actively developed it seems!) or showing the device’s WiFi status. So I did!</p> <p><a href="/images/image_338.png"><img width="381" height="235" title="Tessel External Tools" style="border: 0px currentColor; border-image: none; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;" alt="Tessel External Tools" src="/images/image_thumb_298.png" border="0"></a></p> <p>External Tools can be added under the <strong><em>IDE Settings | External Tools</em></strong> and added to groups and so on. Here’s what I entered for the “Update firmware” command:</p> <p><a href="/images/image_339.png"><img width="617" height="499" title="Update Tessel from WebStorm" style="border: 0px currentColor; border-image: none; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;" alt="Update Tessel from WebStorm" src="/images/image_thumb_299.png" border="0"></a></p> <p>It’s basically just running node, passing it the path to the Tessel command line script and appending the correct parameter.</p> <p>Now, I don’t use my newly created menu too much I must say. Using the command line tools directly is more straightforward. But adding these external tools does give an additional advantage: since I have to re-connect to the WiFi every now and then (Tessel’s WiFi chip is a bit flakey when further away from the access point), I added an external tool for connectingit to WiFi and assigned a shortcut to it (<strong><em>IDE Settings | Keymaps</em></strong>, search for whatever label you gave the command and use the context menu to assign a keyboard shortcut). On my machine, <strong><em>Ctrl+Alt+W</em></strong> resets the Tessel’s WiFi now!</p> <h2>Installing npm Packages</h2>       <p>This one may be overkill, but I found searching npm for Tessel-related packages quite handy through the IDE. From <strong><em>Project Settings | Node.JS and NPM</em></strong>, searching packages is pretty simple. And installing them, too! Careful, Tessel’s 32 MB of storage may not like too many modules…</p> <p><a href="/images/image_340.png"><img width="663" height="430" title="NPM webstorm" style="border: 0px currentColor; border-image: none; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;" alt="NPM webstorm" src="/images/image_thumb_300.png" border="0"></a></p> <p><em>Fun fact: writing this blog post, I noticed the grunt-tessel package which contains tasks that run or deploy scripts to the device. If you prefer using Grunt for doing that, know WebStorm comes with a </em><a href="http://blog.jetbrains.com/webstorm/2014/05/grunt-in-webstorm-8/"><em>Grunt runner</em></a><em>, too.</em></p> <p>That’s it, for now, I do hope to tinker away on the Tessel in the next weeks nad finish my thermometer and the app so I can see the (historical) temperature in my house,</p>
{% include imported_disclaimer.html %}
