---
layout: post
title: "Generic arrays in PHP"
date: 2007-10-22 01:03:00 +0000
comments: true
published: true
categories: ["post"]
tags: ["General", "PHP"]
alias: ["/post/2007/10/22/Generic-arrays-in-PHP.aspx", "/post/2007/10/22/generic-arrays-in-php.aspx"]
author: Maarten Balliauw
redirect_from:
 - /post/2007/10/22/Generic-arrays-in-PHP.aspx.html
 - /post/2007/10/22/generic-arrays-in-php.aspx.html
---
<p>Assuming everyone knows what <a href="http://en.wikipedia.org/wiki/Generic_programming" target="_blank">generics</a> are, let's get down to business right away. PHP does not support generics or something similar, though it could be very useful in PHP development.&nbsp; Luckily, using some standard OO-practises, a semi-generic array can easily be created, even in multiple ways! Here's&nbsp;the road to PHP generics.&nbsp;</p>
<h1>The hard way...</h1>
<p><img src="/images/20071022-generics-hardway.png" border="0" alt="" hspace="5" vspace="5" width="451" height="381" align="right" /></p>
<p>One of the roads to PHP generics is some simple inheritance and type hinting. Let's have a look at PHP's <a href="http://nl2.php.net/manual/en/function.ArrayObject-construct.php" target="_blank">ArrayObject</a>. This class has 2 interesting methods, namely offsetSet() and append(). This would mean I can simply create a new class which inherits from ArrayObject, and uses type hinting to restrict some additions:</p>
<p>[code:c#]</p>
<p>// Example class<br />class Example {<br />&nbsp; public $SomeProperty;<br />}</p>
<p>// Example class generic ArrayObject<br />class ExampleArrayObject extends ArrayObject {<br />&nbsp; public function append(Example $value) {<br />&nbsp;&nbsp;&nbsp; parent::append($value);<br />&nbsp; }<br /><br />&nbsp; public function offsetSet($index, Example $value) {<br />&nbsp;&nbsp;&nbsp; parent::offsetSet($index, $value);<br />&nbsp; }<br />}<br /><br /><br />// Example additions<br />$myArray = new ExampleArrayObject();<br />$myArray-&gt;append( new Example() ); // Works fine<br />$myArray-&gt;append( "Some data..." ); // Will throw an Exception!</p>
<p>[/code]</p>
<h1>The flexible way</h1>
<p><img src="/images/20071022-generics-flexibleway.png" alt="" width="211" height="433" align="right" /> There are some disadvantages to the above solution. For a start, you can't create a generic "string" array unless you encapsulate strings in a specific object type. Same goes for other primitive types. Let's counter this problem! Here's the same code as above using a "GenericArrayObject":</p>
<p>[code:c#]</p>
<p>// Example class<br />class Example {<br />&nbsp; public $SomeProperty;<br />}<br /><br />// Validation function<br />function is_class_example($value) {<br />&nbsp; return $value instanceof Example;<br />}<br /><br />/**<br />&nbsp;* Class GenericArrayObject<br />&nbsp;* <br />&nbsp;* Contains overrides for ArrayObject methods providing generics-like functionality.<br />&nbsp;*<br />&nbsp;* @author&nbsp;&nbsp;&nbsp; Maarten Balliauw<br />&nbsp;*/<br />class GenericArrayObject extends ArrayObject {<br />&nbsp;&nbsp;&nbsp; /**<br />&nbsp;&nbsp;&nbsp; &nbsp;* Validation function<br />&nbsp;&nbsp;&nbsp; &nbsp;*<br />&nbsp;&nbsp;&nbsp; &nbsp;* @var &nbsp;&nbsp;&nbsp; string<br />&nbsp;&nbsp;&nbsp; &nbsp;* @access&nbsp;&nbsp;&nbsp; private<br />&nbsp;&nbsp;&nbsp; &nbsp;*/<br />&nbsp;&nbsp;&nbsp; private $_validationFunction = '';<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <br />&nbsp;&nbsp;&nbsp; /**<br />&nbsp;&nbsp;&nbsp; &nbsp;* Set validation function<br />&nbsp;&nbsp;&nbsp; &nbsp;*<br />&nbsp;&nbsp;&nbsp; &nbsp;* @param &nbsp;&nbsp;&nbsp; string&nbsp;&nbsp;&nbsp; $functionName&nbsp;&nbsp;&nbsp; Validation function<br />&nbsp;&nbsp;&nbsp; &nbsp;* @throws &nbsp;&nbsp;&nbsp; Exception<br />&nbsp;&nbsp;&nbsp; &nbsp;* @access&nbsp;&nbsp;&nbsp; public<br />&nbsp;&nbsp;&nbsp; &nbsp;*/<br />&nbsp;&nbsp;&nbsp; public function setValidationFunction($functionName = 'is_string') {<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; if ($this-&gt;_validationFunction == '') {<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; $this-&gt;_validationFunction = $functionName;<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; return;<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; $iterator = $this-&gt;getIterator();<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; while ($iterator-&gt;valid()) {<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; if (!call_user_func_array($functionName, array($iterator-&gt;current()))) {<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; throw new Exception("Switching from " . $this-&gt;_validationFunction . " to " . $functionName . " is not possible for all elements.");<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; $iterator-&gt;next();<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; $this-&gt;_validationFunction = $functionName;<br />&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp; <br />&nbsp;&nbsp;&nbsp; /**<br />&nbsp;&nbsp;&nbsp; &nbsp;* Append<br />&nbsp;&nbsp;&nbsp; &nbsp;*<br />&nbsp;&nbsp;&nbsp; &nbsp;* @param &nbsp;&nbsp;&nbsp; mixed&nbsp;&nbsp;&nbsp; $value<br />&nbsp;&nbsp;&nbsp; &nbsp;* @throws &nbsp;&nbsp;&nbsp; Exception<br />&nbsp;&nbsp;&nbsp; &nbsp;* @access&nbsp;&nbsp;&nbsp; public<br />&nbsp;&nbsp;&nbsp; &nbsp;*/<br />&nbsp;&nbsp;&nbsp; public function append($value) {<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; if ($this-&gt;_validationFunction == '') {<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; throw new Exception("No validation function has been set.");<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; if (call_user_func_array($this-&gt;_validationFunction, array($value))) {<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; parent::append($value);<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; } else {<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; throw new Exception("Appended type does not meet constraint " . $this-&gt;_validationFunction);<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp; <br />&nbsp;&nbsp;&nbsp; /**<br />&nbsp;&nbsp;&nbsp; &nbsp;* offsetSet<br />&nbsp;&nbsp;&nbsp; &nbsp;*<br />&nbsp;&nbsp;&nbsp; &nbsp;* @param &nbsp;&nbsp;&nbsp; mixed&nbsp;&nbsp;&nbsp; $index<br />&nbsp;&nbsp;&nbsp; &nbsp;* @param &nbsp;&nbsp;&nbsp; string&nbsp;&nbsp;&nbsp; $newval<br />&nbsp;&nbsp;&nbsp; &nbsp;* @throws &nbsp;&nbsp;&nbsp; Exception<br />&nbsp;&nbsp;&nbsp; &nbsp;* @access&nbsp;&nbsp;&nbsp; public<br />&nbsp;&nbsp;&nbsp; &nbsp;*/<br />&nbsp;&nbsp;&nbsp; public function offsetSet($index, $newval) {<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; if ($this-&gt;_validationFunction == '') {<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; throw new Exception("No validation function has been set.");<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; if (call_user_func_array($this-&gt;_validationFunction, array($newval))) {<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; parent::offsetSet($index, $newval);<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; } else {<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; throw new Exception("Appended type does not meet constraint " . $this-&gt;_validationFunction);<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp; }<br />}<br /><br />// Example additions<br />$myArray = new GenericArrayObject();<br />$myArray-&gt;setValidationFunction('is_class_example');<br />$myArray-&gt;append( new Example() ); // Works fine<br />$myArray-&gt;append( "Some data..." ); // Will throw an Exception!</p>
<p>[/code]</p>
<p>Using this flexible class, you can simply set a validation function on the GenericArrayObject, which enabels you to use PHP's built-in functions like is_string (string-only ArrayObject), is_int, ... You can even write a small validation function which matches a string against a regular expression and for example create an e-mail address ArrayObject rejecting any string that does not match this regular expression.</p>
{% include imported_disclaimer.html %}
