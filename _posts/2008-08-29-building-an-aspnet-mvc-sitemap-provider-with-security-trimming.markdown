---
layout: post
title: "Building an ASP.NET MVC sitemap provider with security trimming"
date: 2008-08-29 11:45:00 +0000
comments: true
published: true
categories: ["post"]
tags: ["ASP.NET", "CSharp", "General", "MVC", "Software"]
alias: ["/post/2008/08/29/Building-an-ASPNET-MVC-sitemap-provider-with-security-trimming.aspx", "/post/2008/08/29/building-an-aspnet-mvc-sitemap-provider-with-security-trimming.aspx"]
author: Maarten Balliauw
redirect_from:
 - /post/2008/08/29/Building-an-ASPNET-MVC-sitemap-provider-with-security-trimming.aspx.html
 - /post/2008/08/29/building-an-aspnet-mvc-sitemap-provider-with-security-trimming.aspx.html
---
<p><img src="/images/warning.gif" alt="Warning!" title="Warning!" hspace="5" vspace="5" align="left" /><br /><strong>Warning!</strong><br />A new version of the source code provided in this post is available <a href="/post/2009/03/20/new-codeplex-project-mvcsitemap-ndash3b-aspnet-mvc-sitemap-provider.aspx" target="_blank">here</a>. Use this blog post as reference only.&nbsp; </p><hr /><p>Yes, it has been a while since my last post. A nice vacation to Austria, some work to catch up, ... All excuses, I know, but I&#39;ll make it up to you with a huge blog post! </p><p>If you have been using the ASP.NET MVC framework, you possibly have been searching for something like the classic ASP.NET sitemap. After you&#39;ve played with it, you even found it useful! But not really flexible and easy to map to routes and controllers. Sounds familiar? Continue reading! Doesn&#39;t ring a bell? Well, continue reading, please! </p><p>Feel free to <a href="http://examples.maartenballiauw.be/MvcSitemapProviderDemo/MvcSitemapProviderDemo.zip">download the sample code</a>. <br /><strong>UPDATE:</strong> A version for preview 5 can also be downloaded: <a rel="enclosure" href="/files/MvcSitemapProvider.cs">MvcSitemapProvider.cs (19.46 kb)</a> </p><p><font size="1">The base concept of this class is based on someone else&#39;s version which supports dynamic nodes, populated by code instead of XML. Unfortunately, I forgot to write down the URL where I found it. So please, if you do find something like that, let me know so I can thank this person for the base concepts of his class...</font> </p><p><a href="http://www.dotnetkicks.com/kick/?url=/post/2008/08/29/Building-an-ASPNET-MVC-sitemap-provider-with-security-trimming.aspx&amp;title=Building%20an%20ASP.NET%20MVC%20sitemap%20provider%20with%20security%20trimming"><img src="http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=/post/2008/08/29/Building-an-ASPNET-MVC-sitemap-provider-with-security-trimming.aspx" border="0" alt="kick it on DotNetKicks.com" width="82" height="18" /> </a></p><h2>The concept</h2><p>What I would like, is having a web.sitemap file which looks like the following: </p><p>[code:c#] </p><p>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;<br />&lt;siteMap&gt;<br />&nbsp; &lt;siteMapNode id=&quot;Root&quot; url=&quot;~/Index.aspx&quot;&gt;<br />&nbsp;&nbsp;&nbsp; &lt;mvcSiteMapNode id=&quot;Home&quot; title=&quot;Home&quot; controller=&quot;Home&quot; action=&quot;Index&quot;&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;mvcSiteMapNode id=&quot;About&quot; title=&quot;About Us&quot; controller=&quot;Home&quot; action=&quot;About&quot; /&gt;<br />&nbsp;&nbsp;&nbsp; &lt;/mvcSiteMapNode&gt; </p><p>&nbsp;&nbsp;&nbsp; &lt;mvcSiteMapNode id=&quot;Products&quot; title=&quot;Products&quot; controller=&quot;Products&quot;&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;mvcSiteMapNode id=&quot;Books&quot; title=&quot;Books&quot; controller=&quot;Products&quot; action=&quot;List&quot; category=&quot;Books&quot; /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;mvcSiteMapNode id=&quot;DVD&quot; title=&quot;DVD&#39;s&quot; controller=&quot;Products&quot; action=&quot;List&quot; category=&quot;DVD&quot;/&gt;<br />&nbsp;&nbsp;&nbsp; &lt;/mvcSiteMapNode&gt;<br />&nbsp;&nbsp;&nbsp; &lt;mvcSiteMapNode id=&quot;Account&quot; title=&quot;Account&quot; controller=&quot;Account&quot;&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;mvcSiteMapNode id=&quot;Login&quot; title=&quot;Login&quot; controller=&quot;Account&quot; action=&quot;Login&quot; /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;mvcSiteMapNode id=&quot;Register&quot; title=&quot;Account Creation&quot; controller=&quot;Account&quot; action=&quot;Register&quot; /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;mvcSiteMapNode id=&quot;ChangePassword&quot; title=&quot;Change Password&quot; controller=&quot;Account&quot; action=&quot;ChangePassword&quot; /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;mvcSiteMapNode id=&quot;Logout&quot; title=&quot;Logout&quot; controller=&quot;Account&quot; action=&quot;Logout&quot; /&gt;<br />&nbsp;&nbsp;&nbsp; &lt;/mvcSiteMapNode&gt;<br />&nbsp; &lt;/siteMapNode&gt;<br />&lt;/siteMap&gt; </p><p>[/code] </p><p>That&#39;s right: regular siteMapNodes, but also <em>mvcSiteMapNodes</em>! I want my ASP.NET menu control and sitemap path to use both node types for determining the current locattion on my website. And since the ASP.NET MVC framework uses routing and allows extra parameters to build up a URL, I thought of creating an <em>mvcSiteMapNode</em>. </p><p>Each mvcSiteMapNode is structured like this: </p><table border="1" cellspacing="0" cellpadding="2" width="90%">	<tbody>		<tr>			<td valign="top" style="width: 100px"><strong>id</strong></td>									<td valign="top">Id for the current node. Can only occur once!</td>						</tr>		<tr>			<td valign="top"><strong>title</strong></td>									<td valign="top">The title to show in menu&#39;s.</td>						</tr>		<tr>			<td valign="top"><strong>description</strong></td>									<td valign="top">Optional description.</td>						</tr>		<tr>			<td valign="top"><strong>controller</strong></td>									<td valign="top">The controller to map this node to. Will default to &quot;Home&quot; if it is not specified.</td>						</tr>		<tr>			<td valign="top"><strong>action</strong></td>									<td valign="top">The action on that controller to map this node to. Will default to &quot;Index&quot; if it is not specified.</td>						</tr>		<tr>			<td valign="top"><strong>*</strong></td>									<td valign="top">Well, any other attribute will be used as route data values. For example, if you add &quot;category=&#39;Books&#39;&quot;, it will correpond with new { category = &quot;Books&quot; } in your route definitions.</td>						</tr>		<tr>			<td valign="top"><strong>paramid</strong></td>									<td valign="top">Well, this one maps to new { id = ... }, since I already used id before...</td>						</tr>	</tbody></table><h2>Implementing it</h2><p>Two options for this one... Option one would be extending the existing <em>XmlSiteMapProvider</em> class, but that seemed like a no-go because... well... I wanted to take the hard way :-) Option two it is! And that&#39;s extending <em>StaticSiteMapProvider</em>. </p><p>This <em>MvcSiteMapProvider</em> class will have to do some things: </p><ul>	<li>Read the web.config settings</li>			<li>Cache my sitemap nodes for a specified amount of time</li>			<li>Do some mapping of the current HttpContext (which is not IHttpContext, unfortunately...) to the current route</li>			<li>Security trimming! The provider should check my controllers for <em>AuthorizeAttribute</em> and follow the directions of that attribute.</li></ul><p>If you want to check the full source code, <a href="http://examples.maartenballiauw.be/MvcSitemapProviderDemo/MvcSitemapProviderDemo.zip">feel free to download it</a>. I&#39;ll not go trough it completely in this blog post, but just pick some interesting parts. </p><h3>MvcSiteMapNode</h3><p>First things first! If I want to use a custom sitemap node, I&#39;ll have to create one! Here&#39;s my overloaded version of the <em>SiteMapNode</em> class which now also contains a Controller and Action property: </p><p>[code:c#] </p><p>/// &lt;summary&gt;<br />/// MvcSiteMapNode<br />/// &lt;/summary&gt;<br />public class MvcSiteMapNode : SiteMapNode<br />{ </p><p>&nbsp;&nbsp;&nbsp; #region Properties </p><p>&nbsp;&nbsp;&nbsp; public string Id { get; set; }<br />&nbsp;&nbsp;&nbsp; public string Controller { get; set; }<br />&nbsp;&nbsp;&nbsp; public string Action { get; set; } </p><p>&nbsp;&nbsp;&nbsp; #endregion </p><p>&nbsp;&nbsp;&nbsp; #region Constructor </p><p>&nbsp;&nbsp;&nbsp; /// &lt;summary&gt;<br />&nbsp;&nbsp;&nbsp; /// Creates a new MvcSiteMapNode instance<br />&nbsp;&nbsp;&nbsp; /// &lt;/summary&gt;<br />&nbsp;&nbsp;&nbsp; public MvcSiteMapNode(SiteMapProvider provider, string key)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : base(provider, key)<br />&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Id = key;<br />&nbsp;&nbsp;&nbsp; } </p><p>&nbsp;&nbsp;&nbsp; #endregion </p><p>} </p><p>[/code] </p><h3>Reading the mvcSiteMapNode XML</h3><p>That&#39;s actually a nice one! Here&#39;s the full snippet: </p><p>[code:c#] </p><p>/// &lt;summary&gt;<br />/// Maps an XMLElement from the XML file to a SiteMapNode.<br />/// &lt;/summary&gt;<br />/// &lt;param name=&quot;node&quot;&gt;The element to map.&lt;/param&gt;<br />/// &lt;returns&gt;A SiteMapNode which represents the XMLElement.&lt;/returns&gt;<br />protected SiteMapNode GetMvcSiteMapNodeFromXMLElement(XElement node)<br />{<br />&nbsp;&nbsp;&nbsp; // Get the ID attribute, need this so we can get the key.<br />&nbsp;&nbsp;&nbsp; string id = GetAttributeValue(node.Attribute(&quot;id&quot;)); </p><p>&nbsp;&nbsp;&nbsp; // Create a new sitemapnode, setting the key and url<br />&nbsp;&nbsp;&nbsp; var smNode = new MvcSiteMapNode(this, id); </p><p>&nbsp;&nbsp;&nbsp; // Create a route data dictionary<br />&nbsp;&nbsp;&nbsp; IDictionary&lt;string, object&gt; routeValues = new Dictionary&lt;string, object&gt;(); </p><p>&nbsp;&nbsp;&nbsp; // Add each attribute to our attributes collection on the sitemapnode<br />&nbsp;&nbsp;&nbsp; // and to a route data dictionary.<br />&nbsp;&nbsp;&nbsp; foreach (XAttribute attribute in node.Attributes())<br />&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string attributeName = attribute.Name.ToString();<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string attributeValue = attribute.Value; </p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; smNode[attributeName] = attributeValue; </p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (attributeName != &quot;title&quot; &amp;&amp; attributeName != &quot;description&quot;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; attributeName != &quot;resourceKey&quot; &amp;&amp; attributeName != &quot;id&quot;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&amp; attributeName != &quot;paramid&quot;)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; routeValues.Add(attributeName, attributeValue);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else if (attributeName == &quot;paramid&quot;) </p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; routeValues.Add(&quot;id&quot;, attributeValue);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp; } </p><p>&nbsp;&nbsp;&nbsp; // Set the other properties on the sitemapnode, <br />&nbsp;&nbsp;&nbsp; // these are for title and description, these come<br />&nbsp;&nbsp;&nbsp; // from the nodes attrbutes are we populated all attributes<br />&nbsp;&nbsp;&nbsp; // from the xml to the node.<br />&nbsp;&nbsp;&nbsp; smNode.Title = smNode[&quot;title&quot;];<br />&nbsp;&nbsp;&nbsp; smNode.Description = smNode[&quot;description&quot;];<br />&nbsp;&nbsp;&nbsp; smNode.ResourceKey = smNode[&quot;resourceKey&quot;];<br />&nbsp;&nbsp;&nbsp; smNode.Controller = smNode[&quot;controller&quot;];<br />&nbsp;&nbsp;&nbsp; smNode.Action = smNode[&quot;action&quot;] ?? &quot;Index&quot;; </p><p>&nbsp;&nbsp;&nbsp; // Verify route values<br />&nbsp;&nbsp;&nbsp; if (!routeValues.ContainsKey(&quot;controller&quot;)) routeValues.Add(&quot;controller&quot;, &quot;Home&quot;);<br />&nbsp;&nbsp;&nbsp; if (!routeValues.ContainsKey(&quot;action&quot;)) routeValues.Add(&quot;action&quot;, &quot;Index&quot;); </p><p>&nbsp;&nbsp;&nbsp; // Build URL<br />&nbsp;&nbsp;&nbsp; MvcHandler handler = HttpContext.Current.Handler as MvcHandler;<br />&nbsp;&nbsp;&nbsp; RouteData routeData = handler.RequestContext.RouteData; </p><p>&nbsp;&nbsp;&nbsp; smNode.Url = &quot;~/&quot; + routeData.Route.GetVirtualPath(handler.RequestContext, new RouteValueDictionary(routeValues)).VirtualPath; </p><p>&nbsp;&nbsp;&nbsp; return smNode;<br />} </p><p>[/code] </p><p>Interesting part to note are the last 4 lines of code. I&#39;m using the application&#39;s route data to map controller, action and values to a virtual path, which will be used by all sitemap controls to link to a URL. Coolness! If I change my routes in <em>Global.asax.cs</em>, my menu will automatically be updated without having to change my <em>web.sitemap</em> file. </p><h3>Security trimming</h3><p>Some more code. I told you it would be a long post! </p><p>[code:c#] </p><p>/// &lt;summary&gt;<br />/// Determine if a node is accessible for a user<br />/// &lt;/summary&gt;<br />/// &lt;param name=&quot;context&quot;&gt;Current HttpContext&lt;/param&gt;<br />/// &lt;param name=&quot;node&quot;&gt;Sitemap node&lt;/param&gt;<br />/// &lt;returns&gt;True/false if the node is accessible&lt;/returns&gt;<br />public override bool IsAccessibleToUser(HttpContext context, SiteMapNode node)<br />{<br />&nbsp;&nbsp;&nbsp; // Is security trimming enabled?<br />&nbsp;&nbsp;&nbsp; if (!this.SecurityTrimmingEnabled)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return true; </p><p>&nbsp;&nbsp;&nbsp; // Is it a regular node? No need for more things to do!<br />&nbsp;&nbsp;&nbsp; MvcSiteMapNode mvcNode = node as MvcSiteMapNode;<br />&nbsp;&nbsp;&nbsp; if (mvcNode == null)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return base.IsAccessibleToUser(context, node); </p><p>&nbsp;&nbsp;&nbsp; // Find current handler<br />&nbsp;&nbsp;&nbsp; MvcHandler handler = context.Handler as MvcHandler; </p><p>&nbsp;&nbsp;&nbsp; if (handler != null)<br />&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // It&#39;s an MvcSiteMapNode, try to figure out the controller class<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IController controller = ControllerBuilder.Current.GetControllerFactory().CreateController(handler.RequestContext, mvcNode.Controller); </p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Find all AuthorizeAttributes on the controller class and action method<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; object[] controllerAttributes = controller.GetType().GetCustomAttributes(typeof(AuthorizeAttribute), true);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; object[] actionAttributes = controller.GetType().GetMethod(mvcNode.Action).GetCustomAttributes(typeof(AuthorizeAttribute), true); </p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Attributes found?<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (controllerAttributes.Length == 0 &amp;&amp; actionAttributes.Length == 0)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return true; </p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Find out current principal<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IPrincipal principal = handler.RequestContext.HttpContext.User; </p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Find out configuration<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string roles = &quot;&quot;;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string users = &quot;&quot;;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (controllerAttributes.Length &gt; 0)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AuthorizeAttribute attribute = controllerAttributes[0] as AuthorizeAttribute;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; roles += attribute.Roles;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; users += attribute.Users;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (actionAttributes.Length &gt; 0)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AuthorizeAttribute attribute = actionAttributes[0] as AuthorizeAttribute;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; roles += attribute.Roles;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; users += attribute.Users;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } </p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Still need security trimming?<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (string.IsNullOrEmpty(roles) &amp;&amp; string.IsNullOrEmpty(users) &amp;&amp; principal.Identity.IsAuthenticated)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return true; </p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Determine if the current user is allowed to access the current node<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string[] roleArray = roles.Split(&#39;,&#39;);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string[] usersArray = users.Split(&#39;,&#39;);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; foreach (string role in roleArray)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (role != &quot;*&quot; &amp;&amp; !principal.IsInRole(role)) return false;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; foreach (string user in usersArray)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (user != &quot;*&quot; &amp;&amp; (principal.Identity.Name == &quot;&quot; || principal.Identity.Name != user)) return false;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } </p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<br />&nbsp;&nbsp;&nbsp; } </p><p>&nbsp;&nbsp;&nbsp; return false;<br />} </p><p>[/code] </p><p>Now read it again, it might be a bit confusing. What actually happens, is the following: </p><ol>	<li>Security trimming is not enabled? Well duh! Of cource you can access this node!</li>			<li>If the curent node that a menu control or something similar tries to render is a regular sitemap node, simply use the base class to verify security</li>			<li>If it is an <em>MvcSiteMapNode</em> that we&#39;re accessing, do some work... 			<ol>		<li>Find out the controller and action method that&#39;s being called</li>						<li>Check for security attributes on the controller</li>						<li>Check for security attributes on the action method</li>						<li>Verify if the current <em>IPrincipal</em> complies with all previous stuff</li>			</ol>	</li>			<li>No access granted in the past few lines of code? return false!</li></ol><p>I can now actually hide a sitemap node from unauthorized users by simply adding the<em> [Authorize(...)]</em> attribute to a controller action! </p><h2>Using it</h2><p>Feel free to <a href="http://examples.maartenballiauw.be/MvcSitemapProviderDemo/MvcSitemapProviderDemo.zip">download the sample code</a> or <a href="http://examples.maartenballiauw.be/MvcSitemapProviderDemo/" target="_blank">check the live demo</a>. It has been configured to use my custom sitemap provider by adding the following in web.config: </p><p>[code:xml] </p><p>&lt;system.web&gt;<br />&nbsp;&nbsp;&nbsp; &lt;!-- ... --&gt;<br />&nbsp;&nbsp;&nbsp; &lt;siteMap defaultProvider=&quot;MvcSitemapProvider&quot;&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;providers&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;add name=&quot;MvcSitemapProvider&quot;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; type=&quot;MvcSitemapProviderDemo.Core.MvcSitemapProvider&quot;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; siteMapFile=&quot;~/Web.sitemap&quot; securityTrimmingEnabled=&quot;true&quot;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cacheDuration=&quot;10&quot; /&gt;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/providers&gt;<br />&nbsp;&nbsp;&nbsp; &lt;/siteMap&gt;<br />&nbsp;&nbsp;&nbsp; &lt;!-- ... --&gt;<br />&lt;/system.web&gt; </p><p>[/code] </p><p>In short: I&#39;ve told ASP.NET to use my sitemap provider in favor of the standard sitemap provider. Don&#39;t you just love this provider model! </p><h2>Known issues</h2><ul>	<li>The root node should always link to url &quot;~/Index.aspx&quot;</li>			<li>A controller + action + values combination can only occur once (but that&#39;s the case with regular sitemaps too)</li></ul><p><strong>Note: based on ASP.NET MVC preview 4</strong> - A version for preview 5 can also be downloaded: <a rel="enclosure" href="/files/MvcSiteMapProvider.cs">MvcSiteMapProvider.cs (19.90 kb)</a> </p><p><a href="http://www.dotnetkicks.com/kick/?url=/post/2008/08/29/Building-an-ASPNET-MVC-sitemap-provider-with-security-trimming.aspx&amp;title=Building%20an%20ASP.NET%20MVC%20sitemap%20provider%20with%20security%20trimming"><img src="http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=/post/2008/08/29/Building-an-ASPNET-MVC-sitemap-provider-with-security-trimming.aspx.html" border="0" alt="kick it on DotNetKicks.com" width="82" height="18" /></a>&nbsp; </p>
{% include imported_disclaimer.html %}
