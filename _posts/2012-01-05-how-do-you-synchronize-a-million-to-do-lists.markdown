---
layout: post
title: "How do you synchronize a million to-do lists?"
date: 2012-01-05 16:40:55 +0100
comments: true
published: true
categories: ["post"]
tags: ["Azure", "CSharp", "General", "Scalability"]
alias: ["/post/2012/01/05/How-do-you-synchronize-a-million-to-do-lists.aspx", "/post/2012/01/05/how-do-you-synchronize-a-million-to-do-lists.aspx"]
author: Maarten Balliauw
redirect_from:
 - /post/2012/01/05/How-do-you-synchronize-a-million-to-do-lists.aspx.html
 - /post/2012/01/05/how-do-you-synchronize-a-million-to-do-lists.aspx.html
---
<p>Not this question, but a similar one, has been asked by one of our customers. An interesting question, isn’t it? Wait. It gets more interesting. I’ll sketch a <u>fake</u> scenario that’s similar to our customer’s question. Imagine you are building mobile applications to manage a simple to-do list. This software is available on Android, iPhone, iPad, Windows Phone 7 and via a web browser. One day, the decision to share to-do lists has been made. Me and my wife should be able to share one to-do list between us, having an up-to-date version of the list on every device we grant access to this to-do list. Now imagine there are a million of those groups, where every partner in the sync relationship has the latest version of the list on his device. In often a disconnected world.</p>  <p>How would you solve this?</p>  <h2>My take: Windows Azure Service Bus Topics &amp; Subscriptions</h2>  <p>According to the <a href="http://www.windowsazure.com/en-us/home/tour/service-bus/" target="_blank">Windows Azure Service Bus</a> product description, it “implements a publish/subscribe pattern that delivers a highly scalable, flexible, and cost-effective way to publish messages from an application and deliver them to multiple subscribers.“ Interesting. I’m not going into the specifics of it (maybe in a next post), but the Windows Azure Service Bus gave me an idea: why not put all actions (add an item, complete a to-do) on a queue, tagged with the appropriate “group” metadata? Here’s the producer side:</p>  <p><a href="/images/image_162.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: block; float: none; margin-left: auto; border-top: 0px; margin-right: auto; border-right: 0px; padding-top: 0px" title="Windows Azure Service Bus Topics" border="0" alt="Windows Azure Service Bus Topics" src="/images/image_thumb_129.png" width="565" height="401" /></a></p>  <p>On the consumer side, our devices are listening as well. Every device creates its subscription on the service bus topic. These subscriptions are named per device and filtered on the SyncGroup metadata. The Windows Azure Service Bus will take care of duplicating messages to every subscription as well as keeping track of messages that have not been processed: if I’m offline, messages are queued. If I’m online, I receive messages targeted at my device:</p>  <p><a href="/images/image_163.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: block; float: none; margin-left: auto; border-top: 0px; margin-right: auto; border-right: 0px; padding-top: 0px" title="Windows Azure Service Bus Subscritpions" border="0" alt="Windows Azure Service Bus Subscritpions" src="/images/image_thumb_130.png" width="611" height="441" /></a></p>  <p>The only limitation to this is keeping the number of topics &amp; subscriptions below the limits of Windows Azure Service Bus. But even then: if I just make sure every sync group is on the same bus, I can scale out over multiple service buses.</p>  <p>How would you solve the problem sketched? Comments are very welcomed!</p>
{% include imported_disclaimer.html %}
