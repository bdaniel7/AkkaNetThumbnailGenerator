---
layout: post
title: "Just released: MvcSiteMapProvider 4.0"
date: 2013-07-29 07:39:00 +0000
comments: true
published: true
categories: ["post"]
tags: ["ASP.NET", "CSharp", "General", "MVC", "Projects", "Software"]
alias: ["/post/2013/07/29/Just-released-MvcSiteMapProvider-4.aspx", "/post/2013/07/29/just-released-mvcsitemapprovider-4.aspx"]
author: Maarten Balliauw
redirect_from:
 - /post/2013/07/29/Just-released-MvcSiteMapProvider-4.aspx.html
 - /post/2013/07/29/just-released-mvcsitemapprovider-4.aspx.html
---
<p><a href="/images/MvcSiteMapProvider_1.png"><img title="MvcSiteMapProvider" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; float: right; padding-top: 0px; padding-left: 0px; margin: 5px 0px 5px 5px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="MvcSiteMapProvider" align="right" src="/images/MvcSiteMapProvider_thumb_1.png" width="237" height="50" /></a>After <a href="/post/2013/06/21/And-there-it-is-MvcSiteMapProvider-v4-(beta).aspx">a beta version about a month ago</a>, we are proud to release <a href="https://github.com/maartenba/MvcSiteMapProvider">MvcSiteMapProvider 4.0</a> stable! (<a href="http://www.nuget.org/packages/MvcSiteMapProvider.MVC4/">get it from NuGet</a>, it’s fresh!) It took 6 months to complete this major version but I think our GitHub contributors have done a great job. Thank you all and especially <a href="http://www.shiningtreasures.com/">Shad</a> for taking the lead on this release!</p>  <p>MvcSiteMapProvider is a tool targeted at ASP.NET MVC that provides menus, site maps, site map path functionality, and more. It provides the ability to configure a hierarchical navigation structure using a pluggable architecture that can be XML, database, or code driven. We have moved beyond a mere ASP.NET SiteMapProvider implementation to provide support for multi-tenant applications, flexible caching, dependency injection, and several interface-based extensibility points where virtually any part of the provider can be replaced with a custom implementation.</p>  <p>Based on areas, controller and action method names rather than hardcoded URL references, sitemap nodes are completely dynamic based on the routing engine used in an application. Search Engine Optimization support is also provided in the form of dynamic sitemaps XML, canonical URL tags, and meta robots tags to ensure you send the search engines consistent - rather than conflicting - information about your URLs.</p>  <h2>What has changed?</h2>  <p>What I originally intended to do in v2 (but decided against based on popular request) is something that now has been done. The biggest change in this release is that we have stepped away from being an ASP.NET SiteMapProvider implementation. This means a lot of code had to be rewritten making v4 a pretty clean release. We’re not there yet completely as we want to have unit tests for all (and some more changes will be required for that).</p>  <p>Next to stepping away from the ASP.NET provider model, we’ve improved support for dependency injection. If you don’t need it, no worries. If you do need it: every component of the MvcSiteMapProvider is now pluggable. A simple IoC container is used inside MvcSiteMapProvider but you can easily use your preferred one. We’ve created several NuGet packages for popular containers: <a href="https://nuget.org/packages/MvcSiteMapProvider.MVC4.DI.Ninject">Ninject</a>, <a href="https://nuget.org/packages/MvcSiteMapProvider.MVC4.DI.StructureMap.Modules">StructureMap</a>, <a href="https://nuget.org/packages/MvcSiteMapProvider.MVC4.DI.Unity">Unity</a>, <a href="https://nuget.org/packages/MvcSiteMapProvider.MVC4.DI.Autofac/">Autofac</a> and <a href="https://nuget.org/packages/MvcSiteMapProvider.MVC4.DI.Windsor">Windsor</a>. Note that we also have packages <a href="https://nuget.org/packages/MvcSiteMapProvider.MVC4.DI.Autofac.Modules">with the modules only</a> so you can keep using your own container setup. Read <a href="https://github.com/maartenba/MvcSiteMapProvider/wiki/Configuring-MvcSiteMapProvider">more in the documentation</a>. </p>  <p>The sitemap building pipeline has changed as well. A collection of sitemap builders is used to build the sitemap hierarchy from one or more sources. The default configuration of sitemap builders include an XML parser builder, a reflection-based builder, and a builder that implements the visitor pattern which is used to resolve the URLs before they are cached. Both the builders and visitors can be replaced with 1 or more custom implementations, opening up the door to alternate data sources and alternate visitor actions. In other words, you can build the tree any way you see fit. The only limitation is that only one of the builders must decide which node is the root node of the tree (although subsequent builders may change that decision, if needed).</p>  <p>The <em>Menu()</em> helper has been rewritten to become a more performant and reliable helper (thanks for the contribution, <a href="https://github.com/midishero">midishero</a>!)</p>  <p>A great bunch of performance enhancements and stability fixes are in as well.</p>  <h2>How do I upgrade?</h2>  <p>Since MvcSiteMapProvider has had some significant updates going from v3 to v4, it is best to <a href="https://github.com/maartenba/MvcSiteMapProvider/wiki/Upgrading-from-v3-to-v4">read the upgrade guide</a>. The first part of the upgrade from v3 to v4 will be updating the NuGet package. Before, MvcSiteMapProvider only had one NuGet package. Today, it has been split in multiple, of which the following ones are good to know at this time:</p>  <ul>   <li><code>MvcSiteMapProvider.Web</code> containing all views and <code>web.config</code> changes </li>    <li><code>MvcSiteMapProvider.MVC&lt;version&gt;.Core</code> containing the library itself</li> </ul>  <p>Upgrading from v3 to v4 consists of installing the correct packages for your ASP.NET MVC version:</p>  <ul>   <li>For MVC 2, uninstall <code>MvcSiteMapProvider</code> and install <code>MvcSiteMapProvider.MVC2</code></li>    <li>For MVC 3, uninstall <code>MvcSiteMapProvider</code> and install <code>MvcSiteMapProvider.MVC3</code></li>    <li>For MVC 4, uninstall <code>MvcSiteMapProvider</code> and install <code>MvcSiteMapProvider.MVC4</code></li>    <li>Note that for MVC 4 we have made it possible to upgrade <code>MvcSiteMapProvider</code> instead, which will pull in all required dependencies. Do know that this is not the recommended scenario and it is preferred to install <code>MvcSiteMapProvider.MVC4</code> instead.</li> </ul>  <p>The <code>MvcSiteMapProvider.Web</code> update will add views and all required runtime dependencies to your project. This package is a dependency of each of the above options and generally will not need to be installed explicitly.</p>  <p>In .NET versions prior to .NET 4.0, one line of code should be added to the <code>Application_Start()</code> event of <code>Global.asax</code>:</p>  <pre>MvcSiteMapProvider.DI.Composer.Compose();</pre>

<p>Note that this code is automatically executed if using .NET 4.0 or higher by the use of WebActivator, so in most cases you will not need to call it manually. </p>

<p>More? Please <a href="https://github.com/maartenba/MvcSiteMapProvider/wiki/Upgrading-from-v3-to-v4">read the upgrade guide</a>.</p>

<h2></h2>

<h2>What’s next?</h2>

<p>NuGet all the things! Install the new MvcSiteMapProvider.MVCx package (replace X with your ASP.NET MVC version) and try it out! Leave your comments, ideas and pull requests <a href="https://github.com/maartenba/MvcSiteMapProvider">on our GitHub page</a>.</p>

<p>Enjoy!</p>
{% include imported_disclaimer.html %}
