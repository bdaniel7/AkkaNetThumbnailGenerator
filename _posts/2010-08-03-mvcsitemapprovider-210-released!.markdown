---
layout: post
title: "MvcSiteMapProvider 2.1.0 released!"
date: 2010-08-03 11:35:00 +0000
comments: true
published: true
categories: ["post"]
tags: ["ASP.NET", "CSharp", "General", "MVC", "Projects"]
alias: ["/post/2010/08/03/MvcSiteMapProvider-210-released!.aspx", "/post/2010/08/03/mvcsitemapprovider-210-released!.aspx"]
author: Maarten Balliauw
redirect_from:
 - /post/2010/08/03/MvcSiteMapProvider-210-released!.aspx.html
 - /post/2010/08/03/mvcsitemapprovider-210-released!.aspx.html
---
<p><a href="/images/MvcSiteMapProvider.png"><img style="border-bottom: 0px; border-left: 0px; margin: 5px 0px 5px 5px; display: inline; border-top: 0px; border-right: 0px" title="MvcSiteMapProvider" src="/images/MvcSiteMapProvider_thumb.png" border="0" alt="MvcSiteMapProvider" width="241" height="54" align="right" /></a> The release for <a href="http://mvcsitemap.codeplex.com/releases/view/49491" target="_blank">MvcSiteMapProvider 2.1.0</a> has just been posted on CodePlex. MvcSiteMapProvider is, as the name implies, an ASP.NET MVC SiteMapProvider implementation for the ASP.NET MVC framework. Targeted at ASP.NET MVC 2, it provides sitemap XML functionality and interoperability with the classic ASP.NET sitemap controls, like the SiteMapPath control for rendering breadcrumbs and the Menu control.</p>
<p>Next to a brand new logo, the component has been patched up with several bugfixes, the <a href="http://mvcsitemap.codeplex.com/wikipage?title=Advanced%20node%20visibility&amp;referringTitle=Home" target="_blank">visibility attribute is back (in a slightly cooler reincarnation)</a> and a number of new extension points have been introduced. Let&rsquo;s give you a quick overview&hellip;</p>
<p><a href="http://www.dotnetkicks.com/kick/?url=/post/2010/08/03/MvcSiteMapProvider-210-released!.aspx&amp;title=MvcSiteMapProvider 2.1.0 released!">
                    <img src="http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=/post/2010/08/03/MvcSiteMapProvider-210-released!.aspx" border="0" alt="kick it on DotNetKicks.com" />
                  </a></p>
<h2>Extension points</h2>
<p>MvcSiteMapProvider is built wih extensibility in mind. All extension point contracts are defined in the <em>MvcSiteMapProvider.Extensibility</em> namespace. The sample application on the downloads page contains several custom implementations of these extension points.</p>
<h3>Global extension points (valid for the entire provider and all nodes)</h3>
<p>These extension points can be defined when <a href="http://mvcsitemap.codeplex.com/wikipage?title=Registering%20the%20provider&amp;referringTitle=Extension%20points">Registering the provider</a>.</p>
<h4>&nbsp;&nbsp;Node key generator</h4>
<p>Keys for sitemap nodes are usually automatically generated by the MvcSiteMapProvider core. If, for reasons of accessing sitemap nodes from code, the generated keys should follow other naming rules, a custom <em>MvcSiteMapProvider.Extensibility.INodeKeyGenerator</em> implementation can be written.</p>
<h4>&nbsp; Controller type resolver</h4>
<p>In order to resolve a controller type and action method related to a specific sitemap node, a <em>MvcSiteMapProvider.Extensibility.IControllerTypeResolver</em> is used. This should normally not be extended, however if you want to make use of other systems for resolving controller types and action methods, this is the logical extension point.</p>
<h4>&nbsp;&nbsp;Action method parameter resolver</h4>
<p>Action method parameters are resolved by using ASP.NET MVC's <em>ActionDescriptor</em> class. If you want to use a custom system for this, a <em>MvcSiteMapProvider.Extensibility.IActionMethodParameterResolver</em> implementation can be specified.</p>
<h4>&nbsp; ACL module</h4>
<p>To determine whether a sitemap node is accessible to a specific user, a <em>MvcSiteMapProvider.Extensibility.IAclModule</em> implementation is used. MvcSiteMapProvider uses two of these modules by default: access is granted or denied by checking for [Authorize] attributes on action methods, followed by the roles attribute that can be specified in the sitemap XML.</p>
<h4>&nbsp;&nbsp;URL resolver</h4>
<p>URLs are generated by leveraging a <em>MvcSiteMapProvider.Extensibility.ISiteMapNodeUrlResolver</em> implementation. If, for example, you want all URLs generated by MvcSiteMapProvider to be in lowercase text, a custom implementation can be created.</p>
<h4>&nbsp;&nbsp;Visibility provider</h4>
<p>In some situations, nodes should be visible in the breadcrumb trail but not in a complete sitemap. This can be solved using the <em>MvcSiteMapProvider.Extensibility.ISiteMapNodeVisibilityProvider</em> extension point that can be specified globally for every node in the sitemap or granularly on a specific sitemap node. A sample is available on the <a href="http://mvcsitemap.codeplex.com/wikipage?title=Advanced%20node%20visibility&amp;referringTitle=Extension%20points">Advanced node visibility</a> page.</p>
<h3>Node-specific extenion points (valid for a single node)</h3>
<p>These extension points can be defined when <a href="http://mvcsitemap.codeplex.com/wikipage?title=Creating%20a%20first%20sitemap&amp;referringTitle=Extension%20points">Creating a first sitemap</a>.</p>
<h4>&nbsp; Dynamic node provider</h4>
<p>In many web applications, sitemap nodes are directly related to content in a persistent store like a database.For example, in an e-commerce application, a list of product details pages in the sitemap maps directly to the list of products in the database. Using dynamic sitemaps, a small class implementing <em>MvcSiteMapProvider.Extensibility.IDynamicNodeProvider</em> or extending <em>MvcSiteMapProvider.Extensibility.DynamicNodeProviderBase</em> can be provided to the MvcSiteMapProvider offering a list of dynamic nodes that should be incldued in the sitemap. This ensures the product pages do not have to be specified by hand in the sitemap XML.</p>
<p>A sample can be found on the <a href="http://mvcsitemap.codeplex.com/wikipage?title=Dynamic%20sitemaps&amp;referringTitle=Extension%20points">Dynamic sitemaps</a> page.</p>
<h4>&nbsp; URL resolver</h4>
<p>URLs are generated by leveraging a <em>MvcSiteMapProvider.Extensibility.ISiteMapNodeUrlResolver</em> implementation. If, for example, you want the URL for a sitemap node generated by MvcSiteMapProvider to be in lowercase text, a custom implementation can be created.</p>
<h4>&nbsp; Visibility provider</h4>
<p>In some situations, nodes should be visible in the breadcrumb trail but not in a complete sitemap. This can be solved using the <em>MvcSiteMapProvider.Extensibility.ISiteMapNodeVisibilityProvider</em> extension point that can be specified globally for every node in the sitemap or granularly on a specific sitemap node. A sample is available on the <a href="http://mvcsitemap.codeplex.com/wikipage?title=Advanced%20node%20visibility&amp;referringTitle=Extension%20points">Advanced node visibility</a> page.</p>
<h2>Conclusion</h2>
<p>Only one conclusion: <a href="http://mvcsitemap.codeplex.com/releases/view/49491" target="_blank">grab the latest bits and start playing with them</a>! And feel free to bug me with feature requests and issues found.</p>
<p>Also, <a href="http://www.twitter.com/maartenballiauw" target="_blank">follow me on Twitter</a> for updates on this project.</p>
{% include imported_disclaimer.html %}
