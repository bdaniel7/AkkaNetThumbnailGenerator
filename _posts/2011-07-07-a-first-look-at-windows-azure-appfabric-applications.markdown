---
layout: post
title: "A first look at Windows Azure AppFabric Applications"
date: 2011-07-07 10:39:00 +0000
comments: true
published: true
categories: ["post"]
tags: ["Azure", "CSharp", "General", "MVC", "Scalability", "Software", "Azure Database", "Webfarm"]
alias: ["/post/2011/07/07/A-first-look-at-Windows-Azure-AppFabric-Applications.aspx", "/post/2011/07/07/a-first-look-at-windows-azure-appfabric-applications.aspx"]
author: Maarten Balliauw
redirect_from:
 - /post/2011/07/07/A-first-look-at-Windows-Azure-AppFabric-Applications.aspx.html
 - /post/2011/07/07/a-first-look-at-windows-azure-appfabric-applications.aspx.html
---
<p>After the Windows Azure AppFabric team announced the availability of <a href="http://blogs.msdn.com/b/appfabric/archive/2011/06/20/introducing-windows-azure-appfabric-applications.aspx" target="_blank">Windows Azure AppFabric Applications</a> (preview), I <a href="https://portal.appfabriclabs.com/" target="_blank">signed up for early access</a> immediately and got in. After installing the tools and creating a namespace through the portal, I decided to give it a try to see what it’s all about. Note that <a href="http://convective.wordpress.com/2011/07/01/windows-azure-appfabric-applications/" target="_blank">Neil Mackenzie</a> also has an extensive post on “WAAFapps” which I recommend you to read as well.</p>  <h2>So what is this Windows Azure AppFabric Applications thing?</h2>  <p>Before answering that question, let’s have a brief look at what Windows Azure is today. According to Microsoft, Windows Azure is a “PaaS” (Platform-as-a-Service) offering. What that means is that Windows Azure offers a series of platform components like compute, storage, caching, authentication, a service bus, a database, a CDN, … to your applications.</p>  <p>Consuming those components is pretty low level though: in order to use, let’s say, caching, one has to add the required references, make some web.config changes and open up a connection to these things. Ok, an API is provided but it’s not the case that you can seamlessly integrate caching into an application in seconds (in a manner like one would integrate file system access in an application which you literally can do in seconds).</p>  <p>Meet Windows Azure AppFabric Applications. Windows Azure AppFabric Applications (why such long names, Microsoft!) redefine the concept of Platform-as-a-Service: where Windows Azure out of the box is more like a “Platform API-as-a-Service”, Windows Azure AppFabric Applications&#160; is offering tools and platform support for easily integrating the various Windows Azure components.</p>  <p>This “redefinition” of Windows Azure introduces some new concepts: in Windows Azure you have roles and role instances. In AppFabric Applications you don’t have that concept: AFA (yes, I managed to abbreviate it!) uses so-called Containers. A Container is a logical unit in which one or more services of an application are hosted. For example, if you have 2 web applications, caching and SQL Azure, you will (by default) have one Container containing 2 web applications + 2 service references: one for caching, one for SQL Azure.</p>  <p>Containers are not limited to one role or role instance: a container is a set of predeployed role instances on which your applications will run. For example, if you add a WCF service, chances are that this will be part of the same container. Or a different one if you specify otherwise.</p>  <p>It’s pretty interesting that you can scale containers separately. For example, one can have 2 scale units for the container containing web applications, 3 for the WCF container, … A scale unit is not necessarily just one extra instance: it depends on how many services are in a container? In fact, you shouldn’t care anymore about role instances and virtual machines: with AFA (my abbreviation for Windows Azure AppFabric Applications, remember) one can now truly care about only one thing: the application you are building.</p>  <h2>Hello, Windows Azure AppFabric Applications</h2>  <h3>Visual Studio tooling support</h3>  <p>To demonstrate a few concepts, I decided to create a simple web application that uses caching to store the number of visits to the website. After installing the Visual Studio tooling, I started with one of the templates contained in the SDK:</p>  <p><a href="/images/image_127.png"><img style="background-image: none; border-right-width: 0px; margin: 5px auto; padding-left: 0px; padding-right: 0px; display: block; float: none; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="Creating a Windows Azure AppFabric Application" border="0" alt="Creating a Windows Azure AppFabric Application" src="/images/image_thumb_96.png" width="424" height="294" /></a></p>  <p>This template creates a few things. To start with, 2 projects are created in Visual Studio: one MVC application in which I’ll create my web application, and one Windows Azure AppFabric Application containing a file <em>App.cs</em> which seems to be a DSL for building Windows Azure AppFabric Application. Opening this DSL gives the following canvas in Visual Studio:</p>  <p><a href="/images/image_128.png"><img style="background-image: none; border-right-width: 0px; margin: 5px auto; padding-left: 0px; padding-right: 0px; display: block; float: none; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="App.cs Windows Azure AppFabric Applications" border="0" alt="App.cs Windows Azure AppFabric Applications" src="/images/image_thumb_97.png" width="424" height="242" /></a></p>  <p>As you can see, this is the overview of my application as well as how they interact with each other. For example, the “MVCWebApp” has 1 endpoint (to serve HTTP requests) + 2 service references (to Windows Azure AppFabric caching and SQL Azure). This is an important notion as it will generate integration code for you. For example, in my MVC web application I can find the <em>ServiceReferences.g.cs </em>file containing the following code:</p>  <div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9D7513F9-C04C-4721-824A-2B34F0212519:6976fc78-d4e6-4892-8bb0-4f0cb6d16e7c" class="wlWriterEditableSmartContent"><pre style=" width: 719px; height: 226px;background-color:White;overflow: auto;"><div><!--

Code highlighting produced by Actipro CodeHighlighter (freeware)
http://www.CodeHighlighter.com/

--><span style="color: #008080;"> 1</span> <span style="color: #0000FF;">class</span><span style="color: #000000;"> ServiceReferences
</span><span style="color: #008080;"> 2</span> <span style="color: #000000;">{
</span><span style="color: #008080;"> 3</span> <span style="color: #000000;">    </span><span style="color: #0000FF;">public</span><span style="color: #000000;"> </span><span style="color: #0000FF;">static</span><span style="color: #000000;"> Microsoft.ApplicationServer.Caching.DataCache CreateImport1()
</span><span style="color: #008080;"> 4</span> <span style="color: #000000;">    {
</span><span style="color: #008080;"> 5</span> <span style="color: #000000;">        </span><span style="color: #0000FF;">return</span><span style="color: #000000;"> Service.ExecutingService.ResolveImport</span><span style="color: #000000;">&lt;</span><span style="color: #000000;">Microsoft.ApplicationServer.Caching.DataCache</span><span style="color: #000000;">&gt;</span><span style="color: #000000;">(</span><span style="color: #800000;">&quot;</span><span style="color: #800000;">Import1</span><span style="color: #800000;">&quot;</span><span style="color: #000000;">);
</span><span style="color: #008080;"> 6</span> <span style="color: #000000;">    }
</span><span style="color: #008080;"> 7</span> <span style="color: #000000;">
</span><span style="color: #008080;"> 8</span> <span style="color: #000000;">    </span><span style="color: #0000FF;">public</span><span style="color: #000000;"> </span><span style="color: #0000FF;">static</span><span style="color: #000000;"> System.Data.SqlClient.SqlConnection CreateImport2()
</span><span style="color: #008080;"> 9</span> <span style="color: #000000;">    {
</span><span style="color: #008080;">10</span> <span style="color: #000000;">        </span><span style="color: #0000FF;">return</span><span style="color: #000000;"> Service.ExecutingService.ResolveImport</span><span style="color: #000000;">&lt;</span><span style="color: #000000;">System.Data.SqlClient.SqlConnection</span><span style="color: #000000;">&gt;</span><span style="color: #000000;">(</span><span style="color: #800000;">&quot;</span><span style="color: #800000;">Import2</span><span style="color: #800000;">&quot;</span><span style="color: #000000;">);
</span><span style="color: #008080;">11</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">12</span> <span style="color: #000000;">}</span></div></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>

<p>Wait a minute… This looks like a cool thing! It’s basically a factory for components that may be hosted elsewhere! Calling <em>ServiceReferences.CreateImport1()</em> will give me a caching client that I can immediately work with! <em>ServiceReferences.CreateImport2()</em> (you can change these names by the way) gives me a connection to SQL Azure. No need to add connection strings in the application itself, no need to configure caching in the application itself. Instead, I can configure these things in the Windows Azure AppFabric Application canvas and just consume them blindly in my code. Awesome!</p>

<p>Here’s the code for my HomeController where I consume the cache/. Even my grandmother can write this!</p>

<div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9D7513F9-C04C-4721-824A-2B34F0212519:ba134e59-edc8-4b2b-9f44-1453339417b8" class="wlWriterEditableSmartContent"><pre style=" width: 719px; height: 226px;background-color:White;overflow: auto;"><div><!--

Code highlighting produced by Actipro CodeHighlighter (freeware)
http://www.CodeHighlighter.com/

--><span style="color: #008080;"> 1</span> <span style="color: #000000;">[HandleError]
</span><span style="color: #008080;"> 2</span> <span style="color: #000000;"></span><span style="color: #0000FF;">public</span><span style="color: #000000;"> </span><span style="color: #0000FF;">class</span><span style="color: #000000;"> HomeController : Controller
</span><span style="color: #008080;"> 3</span> <span style="color: #000000;">{
</span><span style="color: #008080;"> 4</span> <span style="color: #000000;">    </span><span style="color: #0000FF;">public</span><span style="color: #000000;"> ActionResult Index()
</span><span style="color: #008080;"> 5</span> <span style="color: #000000;">    {
</span><span style="color: #008080;"> 6</span> <span style="color: #000000;">        var count </span><span style="color: #000000;">=</span><span style="color: #000000;"> </span><span style="color: #800080;">1</span><span style="color: #000000;">;
</span><span style="color: #008080;"> 7</span> <span style="color: #000000;">        var cache </span><span style="color: #000000;">=</span><span style="color: #000000;"> ServiceReferences.CreateImport1();
</span><span style="color: #008080;"> 8</span> <span style="color: #000000;">        var countItem </span><span style="color: #000000;">=</span><span style="color: #000000;"> cache.GetCacheItem(</span><span style="color: #800000;">&quot;</span><span style="color: #800000;">visits</span><span style="color: #800000;">&quot;</span><span style="color: #000000;">);
</span><span style="color: #008080;"> 9</span> <span style="color: #000000;">        </span><span style="color: #0000FF;">if</span><span style="color: #000000;"> (countItem </span><span style="color: #000000;">!=</span><span style="color: #000000;"> </span><span style="color: #0000FF;">null</span><span style="color: #000000;">)
</span><span style="color: #008080;">10</span> <span style="color: #000000;">        {
</span><span style="color: #008080;">11</span> <span style="color: #000000;">            count </span><span style="color: #000000;">=</span><span style="color: #000000;"> ((</span><span style="color: #0000FF;">int</span><span style="color: #000000;">)countItem.Value) </span><span style="color: #000000;">+</span><span style="color: #000000;"> </span><span style="color: #800080;">1</span><span style="color: #000000;">;
</span><span style="color: #008080;">12</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">13</span> <span style="color: #000000;">        cache.Put(</span><span style="color: #800000;">&quot;</span><span style="color: #800000;">visits</span><span style="color: #800000;">&quot;</span><span style="color: #000000;">, count);
</span><span style="color: #008080;">14</span> <span style="color: #000000;">
</span><span style="color: #008080;">15</span> <span style="color: #000000;">        ViewData[</span><span style="color: #800000;">&quot;</span><span style="color: #800000;">Message</span><span style="color: #800000;">&quot;</span><span style="color: #000000;">] </span><span style="color: #000000;">=</span><span style="color: #000000;"> </span><span style="color: #0000FF;">string</span><span style="color: #000000;">.Format(</span><span style="color: #800000;">&quot;</span><span style="color: #800000;">You are visitor number {0}.</span><span style="color: #800000;">&quot;</span><span style="color: #000000;">, count);
</span><span style="color: #008080;">16</span> <span style="color: #000000;">
</span><span style="color: #008080;">17</span> <span style="color: #000000;">        </span><span style="color: #0000FF;">return</span><span style="color: #000000;"> View();
</span><span style="color: #008080;">18</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">19</span> <span style="color: #000000;">
</span><span style="color: #008080;">20</span> <span style="color: #000000;">    </span><span style="color: #0000FF;">public</span><span style="color: #000000;"> ActionResult About()
</span><span style="color: #008080;">21</span> <span style="color: #000000;">    {
</span><span style="color: #008080;">22</span> <span style="color: #000000;">        </span><span style="color: #0000FF;">return</span><span style="color: #000000;"> View();
</span><span style="color: #008080;">23</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">24</span> <span style="color: #000000;">}</span></div></pre><!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>

<p>Now let’s go back to the Windows Azure AppFabric Application canvas, where I can switch to “Deployment View”:</p>

<p><a href="/images/image_129.png"><img style="background-image: none; border-right-width: 0px; margin: 5px auto; padding-left: 0px; padding-right: 0px; display: block; float: none; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="Windows Azure AppFabric Application Deployment View" border="0" alt="Windows Azure AppFabric Application Deployment View" src="/images/image_thumb_98.png" width="424" height="153" /></a></p>

<p>Deployment View basically lets you decide in which container one or more applications will be running and how many scale units a container should span (see the properties window in Visual Studio for this).</p>

<p>Right-clicking and selecting “Deploy…” deploys my Windows Azure AppFabric Application to the production environment.</p>

<h3>The management portal</h3>

<p>After logging in to <a href="http://portal.appfabriclabs.com">http://portal.appfabriclabs.com</a>, I can manage the application I just published:</p>

<p><a href="/images/image_130.png"><img style="background-image: none; border-right-width: 0px; margin: 5px auto; padding-left: 0px; padding-right: 0px; display: block; float: none; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="Windows Azure AppFabric Application Management Portal" border="0" alt="Windows Azure AppFabric Application Management Portal" src="/images/image_thumb_99.png" width="424" height="170" /></a></p>

<p>I’m not going to go in much detail but will highlight some features. The portal enables you to manage your application: deploy/undeploy, scale, monitor, change configuration, …&#160; Basically everything you would expect to be able to do. And more! If you look at the monitoring part, for example, you will see some KPI’s on your application. Here’s what my sample application shows after being deployed for a few minutes:</p>

<p><a href="/images/image_131.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; margin: 5px auto; padding-left: 0px; padding-right: 0px; display: block; float: none; border-top: 0px; border-right: 0px; padding-top: 0px" title="Windows Azure AppFabric Applications monitoring and latency" border="0" alt="Windows Azure AppFabric Applications monitoring and latency" src="/images/image_thumb_100.png" width="424" height="326" /></a></p>

<p>Pretty slick. It even monitors average latencies etc.!</p>

<h2>Conclusion</h2>

<p>As you can read in this blog post, I’ve been exploring this product and trying out the basics of it. I’m no sure yet if this model will fit every application, but I’m sure a solution like this is where the future of PaaS should be: no longer caring about servers, VM’s or instances, just deploy and let the platform figure everything out. My business value is my application, not the fact that it spans 2 VM’s.</p>

<p>Now when I say “future of PaaS”, I’m also a bit skeptical… Most customers I work with use COM, require startup scripts to configure the environment, care about the server their application runs on. In fact, some applications will never be able to be deployed on this solution because of that. Where Windows Azure already represents a major shift in terms of development paradigm (a too large step for many!), I thing the step to Windows Azure AppFabric Applications is a bridge too far for most people. At present.</p>

<p>But then there’s corporations… As corporations always are 10 steps behind, I foresee that this will only become mainstream within the next 5-8 years (for enterpise). Too bad! I wish most corporate environments moved faster…</p>

<p>If Microsoft wants this thing to succeed I think they need to work even more on shifting minds to the cloud paradigm and more specific to the PaaS paradigm. Perhaps Windows 8 can be a utility to do this: if Windows 8 shifts from “programming for a Windows environment” to “programming for a PaaS environment”, people will start following that direction. What the heck, maybe this is even a great model for Joe Average to create “apps” for Windows 8! Just like one submits an app to AppStore or Marketplace today, he/she can submit an app to “Windows Marketplace” which in the background just drops everything on a technology like Windows Azure AppFabric Applications?</p>
{% include imported_disclaimer.html %}
