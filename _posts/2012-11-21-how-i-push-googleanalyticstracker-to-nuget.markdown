---
layout: post
title: "How I push GoogleAnalyticsTracker to NuGet"
date: 2012-11-21 08:25:30 +0100
comments: true
published: true
categories: ["post"]
tags: ["ASP.NET", "CSharp", "General", "Projects", "Software", "Source control", "Testing"]
alias: ["/post/2012/11/21/How-I-push-GoogleAnalyticsTracker-to-NuGet.aspx", "/post/2012/11/21/how-i-push-googleanalyticstracker-to-nuget.aspx"]
author: Maarten Balliauw
redirect_from:
 - /post/2012/11/21/How-I-push-GoogleAnalyticsTracker-to-NuGet.aspx.html
 - /post/2012/11/21/how-i-push-googleanalyticstracker-to-nuget.aspx.html
---
<p>If you check my blog post <a href="/post/2012/01/20/Tracking-API-usage-with-Google-Analytics.aspx">Tracking API usage with Google Analytics</a>, you’ll see that a small open-source component evolved from <a href="http://www.myget.org">MyGet</a>. This component, GoogleAnalyticsTracker, lives on <a href="https://github.com/maartenba/GoogleAnalyticsTracker">GitHub</a> and <a href="http://nuget.org/packages/GoogleAnalyticsTracker">NuGet</a> and has since evolved into something that supports Windows Phone and Windows RT as well. But let’s not focus on the open-source aspect.</p>  <p>It’s funny how things evolve. GoogleAnalyticsTracker started as a small component inside MyGet, and since a couple of weeks it uses MyGet to publish itself to NuGet. Say what? In this blog post, I’ll elaborate a bit on the development tools used on this tiny component.</p>  <h2>Source code</h2>  <p>Source code for GoogleAnalyticsTracker can be found on <a href="https://github.com/maartenba/GoogleAnalyticsTracker">GitHub</a>. This is the main entry point to all activity around this “project”. If you have a nice addition, feel free to fork it and send me a pull request. </p>  <h2>Staging NuGet packages</h2>  <p>Whenever I update the source code, I want to automatically build it and publish NuGet packages for it. Not directly to NuGet: I want to keep the regular version, the WinRT and WP version more or less in sync regarding version numbers. Also, I sometimes miss something which I fix again 5 minutes after. In the meanwhile, I like to have the generated package on some sort of “staging” feed, at MyGet. It’s even public, check <a title="http://www.myget.org/feed/Packages/githubmaarten" href="http://www.myget.org/F/githubmaarten">http://www.myget.org/F/githubmaarten</a> if you want to use my development artifacts.</p>  <p>When I decide it’s time for these packages to move to the “official NuGet package repository” at <a href="www.nuget.org" target="_blank">NuGet.org</a>, I simply click the “push” button in my MyGet feed. Yes, that’s a manual step but I wanted to have some “gate” in the middle where I should explicitly do something. Here’s what happens after clicking “push”:</p>  <p><a href="/images/image_227.png"><img title="Push to NuGet" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; float: none; padding-top: 0px; padding-left: 0px; margin: 5px auto; display: block; padding-right: 0px; border-top-width: 0px" border="0" alt="Push to NuGet" src="/images/image_thumb_191.png" width="484" height="416" /></a></p>  <p>That’s right! You can use MyGet as a staging feed and from there push your packages onwards to any other feed out there. MyGet takes care of the uploading.</p>  <h2>Building the package</h2>  <p>There’s one thing which I forgot… How do I build these packages? Well… I don’t. I let <a href="http://blog.myget.org/post/2012/10/15/MyGet-Build-Services-Public-Beta.aspx" target="_blank">MyGet Build Services</a>.do the heavy lifting. On your feed, you can simply click the “Add GitHub project” button and a list of all your GitHub repos will be shown:</p>  <p><a href="/images/image_228.png"><img title="Build GitHub project" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; float: none; padding-top: 0px; padding-left: 0px; margin: 5px auto; display: block; padding-right: 0px; border-top-width: 0px" border="0" alt="Build GitHub project" src="/images/image_thumb_192.png" width="484" height="416" /></a></p>  <p>Tick a box and you’re ready to roll. And if you look carefully, you’ll see a “Build hook URL” being shown:</p>  <p><a href="/images/image_229.png"><img title="MyGet build hook" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; float: none; padding-top: 0px; padding-left: 0px; margin: 5px auto; display: block; padding-right: 0px; border-top-width: 0px" border="0" alt="MyGet build hook" src="/images/image_thumb_193.png" width="484" height="186" /></a></p>  <p>Back on GitHub, there’s this concept of “service hooks”, basically small utilities that you can fire whenever a new commit occurs on your repository. Wouldn’t it be awesome to trigger package creation on MyGet whenever I check in code to GitHub? Guess what…</p>  <p><a href="/images/image_230.png"><img title="GitHub build hook" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; float: none; padding-top: 0px; padding-left: 0px; margin: 5px auto; display: block; padding-right: 0px; border-top-width: 0px" border="0" alt="GitHub build hook" src="/images/image_thumb_194.png" width="484" height="224" /></a></p>  <p>That’s right! And MyGet even runs unit tests. Some sort of a continuous integration where I have the choice to promote packages to NuGet whenever I think they are stable.</p>
{% include imported_disclaimer.html %}
