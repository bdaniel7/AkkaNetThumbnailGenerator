---
layout: post
title: "Rewriting WCF OData Services base URL with load balancing & reverse proxy"
date: 2011-11-08 14:37:00 +0100
comments: true
published: true
categories: ["post"]
tags: ["ASP.NET", "CSharp", "General", "MVC", "Scalability", "Webfarm"]
alias: ["/post/2011/11/08/Rewriting-WCF-OData-Services-base-URL-with-load-balancing-reverse-proxy.aspx", "/post/2011/11/08/rewriting-wcf-odata-services-base-url-with-load-balancing-reverse-proxy.aspx"]
author: Maarten Balliauw
redirect_from:
 - /post/2011/11/08/Rewriting-WCF-OData-Services-base-URL-with-load-balancing-reverse-proxy.aspx.html
 - /post/2011/11/08/rewriting-wcf-odata-services-base-url-with-load-balancing-reverse-proxy.aspx.html
---
<p>When scaling out an application to multiple servers, often a form of load balancing or reverse proxying is used to provide external users access to a web server. For example, one can be in the situation where two servers are hosting a WCF OData Service and are exposed to the Internet through either a load balancer or a reverse proxy. Below is a figure of such setup using a reverse proxy.</p>
<p><a href="/images/image_146.png"><img style="background-image: none; padding-left: 0px; padding-right: 0px; display: block; float: none; margin-left: auto; margin-right: auto; padding-top: 0px; border: 0px;" title="WCF OData Services hosted in reverse proxy" src="/images/image_thumb_114.png" border="0" alt="WCF OData Services hosted in reverse proxy" width="338" height="213" /></a></p>
<p>As you can see, the external server listens on the URL <a href="http://www.example.com">www.example.com</a>, while both internal servers are listening on their respective host names. Guess what: whenever someone accesses a WCF OData Service through the reverse proxy, the XML generated by one of the two backend servers is slightly invalid:</p>
<p><a href="/images/image_147.png"><img style="background-image: none; padding-left: 0px; padding-right: 0px; display: block; float: none; margin-left: auto; margin-right: auto; padding-top: 0px; border: 0px;" title="OData base URL invalid incorrect" src="/images/image_thumb_115.png" border="0" alt="OData base URL invalid incorrect" width="703" height="261" /></a></p>
<p>While valid XML, the hostname provided to all our clients is wrong. The host name of the backend machine is in there and not the hostname of the reverse proxy URL&hellip;</p>
<p>How can this be solved? There are a couple of answers to that, one that popped into our minds was to rewrite the XML on the reverse proxy and simply &ldquo;string.Replace&rdquo; the invalid URLs. This will probably work, but it feels&hellip; dirty. We chose to create WCF inspector, which simply changes this at the WCF level on each backend node.</p>
<p>Our inspector looks like this: (note I did some hardcoding of the base hostname in here, which obviously should not be done in your code)</p>
<div id="scid:9D7513F9-C04C-4721-824A-2B34F0212519:95e634e3-edb2-4e3c-8a9f-2708ee4c26e1" class="wlWriterEditableSmartContent" style="margin: 0px; display: inline; float: none; padding: 0px;">
<pre style="width: 583px; height: 457px; background-color: white; overflow: auto;"><div><!--

Code highlighting produced by Actipro CodeHighlighter (freeware)
http://www.CodeHighlighter.com/

--><span style="color: #008080;"> 1</span> <span style="color: #000000;">    </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> </span><span style="color: #0000ff;">class</span><span style="color: #000000;"> RewriteBaseUrlMessageInspector
</span><span style="color: #008080;"> 2</span> <span style="color: #000000;">        : IDispatchMessageInspector
</span><span style="color: #008080;"> 3</span> <span style="color: #000000;">    {
</span><span style="color: #008080;"> 4</span> <span style="color: #000000;">        </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> </span><span style="color: #0000ff;">object</span><span style="color: #000000;"> AfterReceiveRequest(</span><span style="color: #0000ff;">ref</span><span style="color: #000000;"> Message request, IClientChannel channel, InstanceContext instanceContext)
</span><span style="color: #008080;"> 5</span> <span style="color: #000000;">        {
</span><span style="color: #008080;"> 6</span> <span style="color: #000000;">            </span><span style="color: #0000ff;">if</span><span style="color: #000000;"> (WebOperationContext.Current </span><span style="color: #000000;">!=</span><span style="color: #000000;"> </span><span style="color: #0000ff;">null</span><span style="color: #000000;"> </span><span style="color: #000000;">&amp;&amp;</span><span style="color: #000000;"> WebOperationContext.Current.IncomingRequest.UriTemplateMatch </span><span style="color: #000000;">!=</span><span style="color: #000000;"> </span><span style="color: #0000ff;">null</span><span style="color: #000000;">)
</span><span style="color: #008080;"> 7</span> <span style="color: #000000;">            {
</span><span style="color: #008080;"> 8</span> <span style="color: #000000;">                UriBuilder baseUriBuilder </span><span style="color: #000000;">=</span><span style="color: #000000;"> </span><span style="color: #0000ff;">new</span><span style="color: #000000;"> UriBuilder(WebOperationContext.Current.IncomingRequest.UriTemplateMatch.BaseUri);
</span><span style="color: #008080;"> 9</span> <span style="color: #000000;">                UriBuilder requestUriBuilder </span><span style="color: #000000;">=</span><span style="color: #000000;"> </span><span style="color: #0000ff;">new</span><span style="color: #000000;"> UriBuilder(WebOperationContext.Current.IncomingRequest.UriTemplateMatch.RequestUri);
</span><span style="color: #008080;">10</span> <span style="color: #000000;">
</span><span style="color: #008080;">11</span> <span style="color: #000000;">                baseUriBuilder.Host </span><span style="color: #000000;">=</span><span style="color: #000000;"> </span><span style="color: #800000;">"</span><span style="color: #800000;">www.example.com</span><span style="color: #800000;">"</span><span style="color: #000000;">;
</span><span style="color: #008080;">12</span> <span style="color: #000000;">                requestUriBuilder.Host </span><span style="color: #000000;">=</span><span style="color: #000000;"> baseUriBuilder.Host;
</span><span style="color: #008080;">13</span> <span style="color: #000000;">
</span><span style="color: #008080;">14</span> <span style="color: #000000;">                OperationContext.Current.IncomingMessageProperties[</span><span style="color: #800000;">"</span><span style="color: #800000;">MicrosoftDataServicesRootUri</span><span style="color: #800000;">"</span><span style="color: #000000;">] </span><span style="color: #000000;">=</span><span style="color: #000000;"> baseUriBuilder.Uri;
</span><span style="color: #008080;">15</span> <span style="color: #000000;">                OperationContext.Current.IncomingMessageProperties[</span><span style="color: #800000;">"</span><span style="color: #800000;">MicrosoftDataServicesRequestUri</span><span style="color: #800000;">"</span><span style="color: #000000;">] </span><span style="color: #000000;">=</span><span style="color: #000000;"> requestUriBuilder.Uri;
</span><span style="color: #008080;">16</span> <span style="color: #000000;">            }
</span><span style="color: #008080;">17</span> <span style="color: #000000;">
</span><span style="color: #008080;">18</span> <span style="color: #000000;">            </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> </span><span style="color: #0000ff;">null</span><span style="color: #000000;">;
</span><span style="color: #008080;">19</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">20</span> <span style="color: #000000;">
</span><span style="color: #008080;">21</span> <span style="color: #000000;">        </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> </span><span style="color: #0000ff;">void</span><span style="color: #000000;"> BeforeSendReply(</span><span style="color: #0000ff;">ref</span><span style="color: #000000;"> Message reply, </span><span style="color: #0000ff;">object</span><span style="color: #000000;"> correlationState)
</span><span style="color: #008080;">22</span> <span style="color: #000000;">        {
</span><span style="color: #008080;">23</span> <span style="color: #000000;">            </span><span style="color: #008000;">//</span><span style="color: #008000;"> Noop</span><span style="color: #008000;">
</span><span style="color: #008080;">24</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">25</span> <span style="color: #000000;">    }</span></div></pre>
<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>
<p>There&rsquo;s not much rocket science in there, although some noteworthy actions are being performed:</p>
<ul>
<li>The current WebOperationContext is queried for the full incoming request URI as well as the base URI. These values are based on the local server, in our example &ldquo;srvweb01&rdquo; and &ldquo;srvweb02&rdquo;.</li>
<li>The Host part of that URI is being replaced with the external hostname, <a href="http://www.example.com">www.example.com</a> </li>
<li>These two values are stored in the current OperationContext&rsquo;s IncomingMessageProperties. Apparently the keys MicrosoftDataServicesRootUri and MicrosoftDataServicesRequestUri affect the URL being generated in the XML feed</li>
</ul>
<p>To apply this inspector to our WCF OData Service, we&rsquo;ve created a behavior and applied the inspector to our service channel. Here&rsquo;s the code for that:</p>
<div id="scid:9D7513F9-C04C-4721-824A-2B34F0212519:041fbd7a-42e8-4795-8023-dc4401d905c8" class="wlWriterEditableSmartContent" style="margin: 0px; display: inline; float: none; padding: 0px;">
<pre style="width: 583px; height: 457px; background-color: white; overflow: auto;"><div><!--

Code highlighting produced by Actipro CodeHighlighter (freeware)
http://www.CodeHighlighter.com/

--><span style="color: #008080;"> 1</span> <span style="color: #000000;">[AttributeUsage(AttributeTargets.Class)]
</span><span style="color: #008080;"> 2</span> <span style="color: #0000ff;">public</span><span style="color: #000000;"> </span><span style="color: #0000ff;">class</span><span style="color: #000000;"> RewriteBaseUrlBehavior
</span><span style="color: #008080;"> 3</span> <span style="color: #000000;">    : Attribute, IServiceBehavior
</span><span style="color: #008080;"> 4</span> <span style="color: #000000;">{
</span><span style="color: #008080;"> 5</span> <span style="color: #000000;">    </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> </span><span style="color: #0000ff;">void</span><span style="color: #000000;"> Validate(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase)
</span><span style="color: #008080;"> 6</span> <span style="color: #000000;">    {
</span><span style="color: #008080;"> 7</span> <span style="color: #000000;">        </span><span style="color: #008000;">//</span><span style="color: #008000;"> Noop</span><span style="color: #008000;">
</span><span style="color: #008080;"> 8</span> <span style="color: #000000;">    }
</span><span style="color: #008080;"> 9</span> <span style="color: #000000;">
</span><span style="color: #008080;">10</span> <span style="color: #000000;">    </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> </span><span style="color: #0000ff;">void</span><span style="color: #000000;"> AddBindingParameters(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase, Collection</span><span style="color: #000000;">&lt;</span><span style="color: #000000;">ServiceEndpoint</span><span style="color: #000000;">&gt;</span><span style="color: #000000;"> endpoints, BindingParameterCollection bindingParameters)
</span><span style="color: #008080;">11</span> <span style="color: #000000;">    {
</span><span style="color: #008080;">12</span> <span style="color: #000000;">        </span><span style="color: #008000;">//</span><span style="color: #008000;"> Noop</span><span style="color: #008000;">
</span><span style="color: #008080;">13</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">14</span> <span style="color: #000000;">
</span><span style="color: #008080;">15</span> <span style="color: #000000;">    </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> </span><span style="color: #0000ff;">void</span><span style="color: #000000;"> ApplyDispatchBehavior(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase)
</span><span style="color: #008080;">16</span> <span style="color: #000000;">    {
</span><span style="color: #008080;">17</span> <span style="color: #000000;">        </span><span style="color: #0000ff;">foreach</span><span style="color: #000000;"> (ChannelDispatcher channelDispatcher </span><span style="color: #0000ff;">in</span><span style="color: #000000;"> serviceHostBase.ChannelDispatchers)
</span><span style="color: #008080;">18</span> <span style="color: #000000;">        {
</span><span style="color: #008080;">19</span> <span style="color: #000000;">            </span><span style="color: #0000ff;">foreach</span><span style="color: #000000;"> (EndpointDispatcher endpointDispatcher </span><span style="color: #0000ff;">in</span><span style="color: #000000;"> channelDispatcher.Endpoints)
</span><span style="color: #008080;">20</span> <span style="color: #000000;">            {
</span><span style="color: #008080;">21</span> <span style="color: #000000;">                endpointDispatcher.DispatchRuntime.MessageInspectors.Add(
</span><span style="color: #008080;">22</span> <span style="color: #000000;">                    </span><span style="color: #0000ff;">new</span><span style="color: #000000;"> RewriteBaseUrlMessageInspector());
</span><span style="color: #008080;">23</span> <span style="color: #000000;">            }
</span><span style="color: #008080;">24</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">25</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">26</span> <span style="color: #000000;">}</span></div></pre>
<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>
<p>This behavior simply loops all channel dispatchers and their endpoints and applies our inspector to them.</p>
<p>Finally, there&rsquo;s nothing left to do to fix our reverse proxy issue than to just annotate our WCF OData Service with this behavior attribute:</p>
<div id="scid:9D7513F9-C04C-4721-824A-2B34F0212519:c188a656-66db-43cd-848f-cb8617cfb951" class="wlWriterEditableSmartContent" style="margin: 0px; display: inline; float: none; padding: 0px;">
<pre style="width: 583px; height: 100px; background-color: white; overflow: auto;"><div><!--

Code highlighting produced by Actipro CodeHighlighter (freeware)
http://www.CodeHighlighter.com/

--><span style="color: #008080;">1</span> <span style="color: #000000;">[RewriteBaseUrlBehavior]
</span><span style="color: #008080;">2</span> <span style="color: #0000ff;">public</span><span style="color: #000000;"> </span><span style="color: #0000ff;">class</span><span style="color: #000000;"> PackageFeedHandler
</span><span style="color: #008080;">3</span> <span style="color: #000000;">    : DataService</span><span style="color: #000000;">&lt;</span><span style="color: #000000;">PackageEntities</span><span style="color: #000000;">&gt;</span><span style="color: #000000;">
</span><span style="color: #008080;">4</span> <span style="color: #000000;">{
</span><span style="color: #008080;">5</span> <span style="color: #000000;">    </span><span style="color: #008000;">//</span><span style="color: #008000;"> ...</span><span style="color: #008000;">
</span><span style="color: #008080;">6</span> <span style="color: #000000;">}</span></div></pre>
<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>
<h2>Working with URL routing</h2>
<p>A while ago, I posted about <a href="/post/2011/05/09/Using-dynamic-WCF-service-routes.aspx">Using dynamic WCF service routes</a>. The technique described below is also appropriate for services created using that technique. When working with that implementation, the source code for the inspector would be slightly different.</p>
<div id="scid:9D7513F9-C04C-4721-824A-2B34F0212519:38ec5c44-3430-48b1-b425-d148b91b2f36" class="wlWriterEditableSmartContent" style="margin: 0px; display: inline; float: none; padding: 0px;">
<pre style="width: 583px; height: 457px; background-color: white; overflow: auto;"><div><!--

Code highlighting produced by Actipro CodeHighlighter (freeware)
http://www.CodeHighlighter.com/

--><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">public</span><span style="color: #000000;"> </span><span style="color: #0000ff;">class</span><span style="color: #000000;"> RewriteBaseUrlMessageInspector
</span><span style="color: #008080;"> 2</span> <span style="color: #000000;">    : IDispatchMessageInspector
</span><span style="color: #008080;"> 3</span> <span style="color: #000000;">{
</span><span style="color: #008080;"> 4</span> <span style="color: #000000;">    </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> </span><span style="color: #0000ff;">object</span><span style="color: #000000;"> AfterReceiveRequest(</span><span style="color: #0000ff;">ref</span><span style="color: #000000;"> Message request, IClientChannel channel, InstanceContext instanceContext)
</span><span style="color: #008080;"> 5</span> <span style="color: #000000;">    {
</span><span style="color: #008080;"> 6</span> <span style="color: #000000;">        </span><span style="color: #0000ff;">if</span><span style="color: #000000;"> (WebOperationContext.Current </span><span style="color: #000000;">!=</span><span style="color: #000000;"> </span><span style="color: #0000ff;">null</span><span style="color: #000000;"> </span><span style="color: #000000;">&amp;&amp;</span><span style="color: #000000;"> WebOperationContext.Current.IncomingRequest.UriTemplateMatch </span><span style="color: #000000;">!=</span><span style="color: #000000;"> </span><span style="color: #0000ff;">null</span><span style="color: #000000;">)
</span><span style="color: #008080;"> 7</span> <span style="color: #000000;">        {
</span><span style="color: #008080;"> 8</span> <span style="color: #000000;">            UriBuilder baseUriBuilder </span><span style="color: #000000;">=</span><span style="color: #000000;"> </span><span style="color: #0000ff;">new</span><span style="color: #000000;"> UriBuilder(WebOperationContext.Current.IncomingRequest.UriTemplateMatch.BaseUri);
</span><span style="color: #008080;"> 9</span> <span style="color: #000000;">            UriBuilder requestUriBuilder </span><span style="color: #000000;">=</span><span style="color: #000000;"> </span><span style="color: #0000ff;">new</span><span style="color: #000000;"> UriBuilder(WebOperationContext.Current.IncomingRequest.UriTemplateMatch.RequestUri);
</span><span style="color: #008080;">10</span> <span style="color: #000000;">
</span><span style="color: #008080;">11</span> <span style="color: #000000;">            var routeData </span><span style="color: #000000;">=</span><span style="color: #000000;"> MyGet.Server.Routing.DynamicServiceRoute.GetCurrentRouteData();
</span><span style="color: #008080;">12</span> <span style="color: #000000;">            var route </span><span style="color: #000000;">=</span><span style="color: #000000;"> routeData.Route </span><span style="color: #0000ff;">as</span><span style="color: #000000;"> Route;
</span><span style="color: #008080;">13</span> <span style="color: #000000;">            </span><span style="color: #0000ff;">if</span><span style="color: #000000;"> (route </span><span style="color: #000000;">!=</span><span style="color: #000000;"> </span><span style="color: #0000ff;">null</span><span style="color: #000000;">)
</span><span style="color: #008080;">14</span> <span style="color: #000000;">            {
</span><span style="color: #008080;">15</span> <span style="color: #000000;">                </span><span style="color: #0000ff;">string</span><span style="color: #000000;"> servicePath </span><span style="color: #000000;">=</span><span style="color: #000000;"> route.Url;
</span><span style="color: #008080;">16</span> <span style="color: #000000;">                servicePath </span><span style="color: #000000;">=</span><span style="color: #000000;"> Regex.Replace(servicePath, </span><span style="color: #800000;">@"</span><span style="color: #800000;">({\*.*})</span><span style="color: #800000;">"</span><span style="color: #000000;">, </span><span style="color: #800000;">""</span><span style="color: #000000;">); </span><span style="color: #008000;">//</span><span style="color: #008000;"> strip out catch-all</span><span style="color: #008000;">
</span><span style="color: #008080;">17</span> <span style="color: #000000;">                </span><span style="color: #0000ff;">foreach</span><span style="color: #000000;"> (var routeValue </span><span style="color: #0000ff;">in</span><span style="color: #000000;"> routeData.Values)
</span><span style="color: #008080;">18</span> <span style="color: #000000;">                {
</span><span style="color: #008080;">19</span> <span style="color: #000000;">                    </span><span style="color: #0000ff;">if</span><span style="color: #000000;"> (routeValue.Value </span><span style="color: #000000;">!=</span><span style="color: #000000;"> </span><span style="color: #0000ff;">null</span><span style="color: #000000;">)
</span><span style="color: #008080;">20</span> <span style="color: #000000;">                    {
</span><span style="color: #008080;">21</span> <span style="color: #000000;">                        servicePath </span><span style="color: #000000;">=</span><span style="color: #000000;"> servicePath.Replace(</span><span style="color: #800000;">"</span><span style="color: #800000;">{</span><span style="color: #800000;">"</span><span style="color: #000000;"> </span><span style="color: #000000;">+</span><span style="color: #000000;"> routeValue.Key </span><span style="color: #000000;">+</span><span style="color: #000000;"> </span><span style="color: #800000;">"</span><span style="color: #800000;">}</span><span style="color: #800000;">"</span><span style="color: #000000;">, routeValue.Value.ToString());
</span><span style="color: #008080;">22</span> <span style="color: #000000;">                    }
</span><span style="color: #008080;">23</span> <span style="color: #000000;">                }
</span><span style="color: #008080;">24</span> <span style="color: #000000;">
</span><span style="color: #008080;">25</span> <span style="color: #000000;">                </span><span style="color: #0000ff;">if</span><span style="color: #000000;"> (</span><span style="color: #000000;">!</span><span style="color: #000000;">servicePath.StartsWith(</span><span style="color: #800000;">"</span><span style="color: #800000;">/</span><span style="color: #800000;">"</span><span style="color: #000000;">))
</span><span style="color: #008080;">26</span> <span style="color: #000000;">                {
</span><span style="color: #008080;">27</span> <span style="color: #000000;">                    servicePath </span><span style="color: #000000;">=</span><span style="color: #000000;"> </span><span style="color: #800000;">"</span><span style="color: #800000;">/</span><span style="color: #800000;">"</span><span style="color: #000000;"> </span><span style="color: #000000;">+</span><span style="color: #000000;"> servicePath;
</span><span style="color: #008080;">28</span> <span style="color: #000000;">                }
</span><span style="color: #008080;">29</span> <span style="color: #000000;">
</span><span style="color: #008080;">30</span> <span style="color: #000000;">                </span><span style="color: #0000ff;">if</span><span style="color: #000000;"> (</span><span style="color: #000000;">!</span><span style="color: #000000;">servicePath.EndsWith(</span><span style="color: #800000;">"</span><span style="color: #800000;">/</span><span style="color: #800000;">"</span><span style="color: #000000;">))
</span><span style="color: #008080;">31</span> <span style="color: #000000;">                {
</span><span style="color: #008080;">32</span> <span style="color: #000000;">                    servicePath </span><span style="color: #000000;">=</span><span style="color: #000000;"> servicePath </span><span style="color: #000000;">+</span><span style="color: #000000;"> </span><span style="color: #800000;">"</span><span style="color: #800000;">/</span><span style="color: #800000;">"</span><span style="color: #000000;">;
</span><span style="color: #008080;">33</span> <span style="color: #000000;">                }
</span><span style="color: #008080;">34</span> <span style="color: #000000;">
</span><span style="color: #008080;">35</span> <span style="color: #000000;">                requestUriBuilder.Path </span><span style="color: #000000;">=</span><span style="color: #000000;"> requestUriBuilder.Path.Replace(baseUriBuilder.Path, servicePath);
</span><span style="color: #008080;">36</span> <span style="color: #000000;">                requestUriBuilder.Host </span><span style="color: #000000;">=</span><span style="color: #000000;"> baseUriBuilder.Host;
</span><span style="color: #008080;">37</span> <span style="color: #000000;">                baseUriBuilder.Path </span><span style="color: #000000;">=</span><span style="color: #000000;"> servicePath;
</span><span style="color: #008080;">38</span> <span style="color: #000000;">            }
</span><span style="color: #008080;">39</span> <span style="color: #000000;">
</span><span style="color: #008080;">40</span> <span style="color: #000000;">            OperationContext.Current.IncomingMessageProperties[</span><span style="color: #800000;">"</span><span style="color: #800000;">MicrosoftDataServicesRootUri</span><span style="color: #800000;">"</span><span style="color: #000000;">] </span><span style="color: #000000;">=</span><span style="color: #000000;"> baseUriBuilder.Uri;
</span><span style="color: #008080;">41</span> <span style="color: #000000;">            OperationContext.Current.IncomingMessageProperties[</span><span style="color: #800000;">"</span><span style="color: #800000;">MicrosoftDataServicesRequestUri</span><span style="color: #800000;">"</span><span style="color: #000000;">] </span><span style="color: #000000;">=</span><span style="color: #000000;"> requestUriBuilder.Uri;
</span><span style="color: #008080;">42</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">43</span> <span style="color: #000000;">
</span><span style="color: #008080;">44</span> <span style="color: #000000;">        </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> </span><span style="color: #0000ff;">null</span><span style="color: #000000;">;
</span><span style="color: #008080;">45</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">46</span> <span style="color: #000000;">
</span><span style="color: #008080;">47</span> <span style="color: #000000;">    </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> </span><span style="color: #0000ff;">void</span><span style="color: #000000;"> BeforeSendReply(</span><span style="color: #0000ff;">ref</span><span style="color: #000000;"> Message reply, </span><span style="color: #0000ff;">object</span><span style="color: #000000;"> correlationState)
</span><span style="color: #008080;">48</span> <span style="color: #000000;">    {
</span><span style="color: #008080;">49</span> <span style="color: #000000;">        </span><span style="color: #008000;">//</span><span style="color: #008000;"> Noop</span><span style="color: #008000;">
</span><span style="color: #008080;">50</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">51</span> <span style="color: #000000;">}</span></div></pre>
<!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --></div>
<p>The idea is identical, except that we&rsquo;re updating the incoming URL path for reasons described in the aforementioned blog post.</p>
<p>Enjoy!</p>
{% include imported_disclaimer.html %}
