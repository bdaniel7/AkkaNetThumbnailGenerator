---
layout: post
title: "Source Control considered harmful"
date: 2014-01-30 08:26:00 +0100
comments: true
published: true
categories: ["post"]
tags: ["ASP.NET", "Books", "CSharp", "General", "Software", "Source control"]
alias: ["/post/2014/01/30/Source-Control-considered-harmful.aspx", "/post/2014/01/30/source-control-considered-harmful.aspx"]
author: Maarten Balliauw
redirect_from:
 - /post/2014/01/30/Source-Control-considered-harmful.aspx.html
 - /post/2014/01/30/source-control-considered-harmful.aspx.html
---
<p><em>TL;DR: Using source control is a really bad idea. Or is it? Skip to Conclusion for the meat of this post.</em><p>One of the first things I do with a new project in Visual Studio is not add it to source control. There are many reasons, but it all boils down to this: <em>Source Control introduces more problems than it solves.</em><p>Before I dive into this, I'll share the solution with you. Put your sources on a USB drive. Yes, it's that simple. <h2>Implications</h2> <p>If you're like most other people, you don't like that solution, because it <em>feels</em> inefficient: <ul> <li>USB drives can get lost</li> <li>USB drives can end up in the dishwasher</li> <li>I have to buy a USB drive for every developer on the team</li> <li>Sharing sources with distributed teams is more difficult: USB drives have to be shipped by snail mail</li></ul> <p>All of that is true, but then again... <ul> <li>You can always make a copy of a USB drive to safeguard against loss</li> <li>Sharing USB drives is really easy: plug and play! Ease of use!</li> <li>You can have lots of coffee waiting for a USB drive to arrive with that contribution to your OSS project</li></ul> <p>Still, many people go for source control: Source Control and a central repository solve all implications of using a USB drive, so why not use source control? <h2>Fragility</h2> <p>Have you ever let a junior developer loose on a git repository? I can promise you, it's not pretty. <ul> <li>Merges will go wrong</li> <li>They will find out about rebasing and mess up the entire system</li> <li>Pull requests on GitHub? One click to merge, no need to test or review!</li> <li>Developers will forget to check in specific files</li></ul> <p>Again: all of this is easy with a USB drive: one location to store the project. Yes, merging is slightly difficult too but then again replaying history in source control is much worse. <p>And I haven't even talked about having to have a network share or a GitHub account in which you can have private repositories. That's all extra costs and extra risks. What if the Internet connection goes down. What if a dev's laptop breaks? You might even say a USB drive is too advanced and a typewriter is an even better way to write code! <h2>Cost</h2> <p>Did I mention the cost of USB drives? At most conferences and shops you will get them<em> for free</em>. Even if you buy them, they are probably around 0.10$ per GB. USB drives are very inexpensive. <p>Compare that with source control: we need an Internet connecion, a GitHub repository, and most importantly: devs will have to read documentation on using git or be coached by someone on the team. That's really inefficient and costs a lot of time! <h2>Conclusion</h2> <p>You may have noted that this is a slightly strange post. You are correct, it is. I’m responding to some of the outrages regarding yesterday’s <a href="http://www.nuget.org">NuGet.org</a> outage. Tweets and blogs mention to not use NuGet, or use NuGet but definitely not use package restore. That’s perfectly fine, but I don’t think the reasons for not using it are well founded, hence the above sarcasm. If it wasn’t clear: you <strong><em>should</em></strong> be using source control. <p>Should you use NuGet package restore? I think it depends on your preference, mostly. It should not depend on NuGet.org outages, nor on the microwave destroying your WiFi signal and failing your builds utilizing package restore. Should you add packages to your repository or use package restore? It depends on what you want to achieve and how you want to work. I prefer not to do this because they are dependencies that are versioned (package version and packages.config) so why version them again? We don’t add the issues from our issue tracker to source control either, right? <p>We put issues in a specialized system for managing issues. In my opinion, the same should be true for software and component dependencies. But then again: if you want to add packages to source control, fine by me. As some tweets said, you don’t have to do it for the minimal disk space optimizations. All that matters is if it makes sense to your process.&nbsp; <p>Just like with source control, issue trackers and other things (like package restore) in your build process, you should read up on them, play with them and know the risks. Do we know that our Internet connection can break during solar storms? Well yes. It’s a minor risk but if it’s important to your shop do mitigate that risk. Do laptops break? Yes. If it’s important that you can keep working even if a laptop crashes, buy some more and keep them up-to-date with your main development machine. If you rely on GitHub and want to get work done if they have issues, make sure you have an up to date fork somewhere on a file share. Make that two file shares! <p>And if you rely on NuGet package restore… you get the point, right? For NuGet, there are private repositories available that can host your in-house packages <em>and</em> the ones you are using from upstream sources like NuGet.org. Use them, if they matter for your development process. Know about NuGet 2.8’s automatic fallback to the local cache you have on disk and if something goes wrong, use that cache until the package source is back up. <p>The development process and the tools are part of your system. Know your tools. Even if it requires you to read crazy books like how to work with git. Or <a href="http://amzn.to/pronuget2">Pro NuGet 2</a>.</p>
{% include imported_disclaimer.html %}
